============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 23704 was started by zikesjan on Jan-MacBook-Pro-5.local,
Fri Jun  6 15:37:29 2014
The command was "/Users/zikesjan/Downloads/LADR-2009-11A/bin/prover9".
============================== end of head ===========================

============================== INPUT =================================
set(prolog_style_variables).

formulas(assumptions).
(all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom).
(all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom).
(all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom).
(all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom).
(all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom).
(all X all T go(X,T)) # label(goIfItsPossible) # label(axiom).
(all X exists Y appear(X,Y,in2)) # label(alwaysAppearsin2) # label(axiom).
(all X exists Y appear(X,Y,in1)) # label(alwaysAppearsin1) # label(axiom).
(all X all T (train(T) -> (exists X2 (less(X,X2) & go(X2,T))))) # label(go) # label(axiom).
(all X all T (train(T) & go(X,T) & (switch(X,s3) = out2 & at(X,T,s3) | switch(X,s4) = out2 & at(X,T,s4)) <-> at(succ(X),T,out2))) # label(out2ax1) # label(axiom).
(all X all T (train(T) & go(X,T) & (switch(X,s3) = out1 & at(X,T,s3) | switch(X,s4) = out1 & at(X,T,s4)) <-> at(succ(X),T,out1))) # label(out1ax1) # label(axiom).
(all X all T (train(T) & go(X,T) & (switch(X,s1) = s3 & at(X,T,s1) | switch(X,s2) = s3 & at(X,T,s2)) <-> at(succ(X),T,s3))) # label(s3ax1) # label(axiom).
(all X all T (train(T) & go(X,T) & (switch(X,s1) = s4 & at(X,T,s1) | switch(X,s2) = s4 & at(X,T,s2)) <-> at(succ(X),T,s4))) # label(s4ax1) # label(axiom).
(all X all T (train(T) & go(X,T) & open(X,in2) & at(X,T,in2) <-> at(succ(X),T,s2))) # label(s2ax1) # label(axiom).
(all X all T (train(T) & go(X,T) & open(X,in1) & at(X,T,in1) <-> at(succ(X),T,s1))) # label(s1ax1) # label(axiom).
in2 != in1 & in2 != s2 & in2 != s1 & in2 != out2 & in2 != out1 & in2 != s3 & in2 != s4 & in1 != s2 & in1 != s1 & in1 != out2 & in1 != out1 & in1 != s3 & in1 != s4 & s2 != s1 & s2 != out2 & s2 != out1 & s2 != s3 & s2 != s4 & s1 != out2 & s1 != out1 & s1 != s3 & s1 != s4 & out2 != out1 & out2 != s3 & out2 != s4 & out1 != s3 & out1 != s4 & s3 != s4 # label(nodesExclusivity) # label(axiom).
(all X all T (at(X,T,out2) -> -at(succ(X),T,out2))) # label(disappearout2) # label(axiom).
(all X all T (at(X,T,out1) -> -at(succ(X),T,out1))) # label(disappearout1) # label(axiom).
(all X all T all N1 all N2 (at(X,T,N1) & at(X,T,N2) -> N1 = N2)) # label(positionInOneNodeAtTime) # label(axiom).
(all X all T1 all T2 (at(X,T1,in2) & T1 != T2 -> -at(X,T2,in2))) # label(onlyOneTrainin2) # label(axiom).
(all X all T1 all T2 (at(X,T1,in1) & T1 != T2 -> -at(X,T2,in1))) # label(onlyOneTrainin1) # label(axiom).
(all X all T (at(succ(X),T,in2) <-> appear(X,T,in2) | at(X,T,in2) & (-go(X,T) | -open(X,in2)))) # label(appearin2) # label(axiom).
(all X all T (at(succ(X),T,in1) <-> appear(X,T,in1) | at(X,T,in1) & (-go(X,T) | -open(X,in1)))) # label(appearin1) # label(axiom).
(all T (goal(T) = out2 | goal(T) = out1)) # label(trainGoals) # label(axiom).
(all X (succ(X) != X -> (clockOrder(X) = in2 <-> clockOrder(succ(X)) = in1))) # label(clockOrderin2) # label(axiom).
(all X (succ(X) != X -> (clockOrder(X) = in1 <-> clockOrder(succ(X)) = in2))) # label(clockOrderin1) # label(axiom).
(all X (clockOrder(X) = in2 | clockOrder(X) = in1)) # label(clockPossibilities) # label(axiom).
(all X (configuration(X,path0) <-> switch(X,s3) = out2 & switch(X,s1) = s3)) # label(switchesConfiguration0) # label(axiom).
(all X (configuration(X,path1) <-> switch(X,s3) = out2 & switch(X,s2) = s3)) # label(switchesConfiguration1) # label(axiom).
(all X (configuration(X,path2) <-> switch(X,s4) = out2 & switch(X,s1) = s4)) # label(switchesConfiguration2) # label(axiom).
(all X (configuration(X,path3) <-> switch(X,s4) = out2 & switch(X,s2) = s4)) # label(switchesConfiguration3) # label(axiom).
(all X (configuration(X,path4) <-> switch(X,s3) = out1 & switch(X,s1) = s3)) # label(switchesConfiguration4) # label(axiom).
(all X (configuration(X,path5) <-> switch(X,s3) = out1 & switch(X,s2) = s3)) # label(switchesConfiguration5) # label(axiom).
(all X (configuration(X,path6) <-> switch(X,s4) = out1 & switch(X,s1) = s4)) # label(switchesConfiguration6) # label(axiom).
(all X (configuration(X,path7) <-> switch(X,s4) = out1 & switch(X,s2) = s4)) # label(switchesConfiguration7) # label(axiom).
(all X all T (free(X,path0) <-> -at(X,T,s3) & -at(X,T,s1))) # label(freeRoute0) # label(axiom).
(all X all T (free(X,path1) <-> -at(X,T,s3) & -at(X,T,s2))) # label(freeRoute1) # label(axiom).
(all X all T (free(X,path2) <-> -at(X,T,s4) & -at(X,T,s1))) # label(freeRoute2) # label(axiom).
(all X all T (free(X,path3) <-> -at(X,T,s4) & -at(X,T,s2))) # label(freeRoute3) # label(axiom).
(all X all T (free(X,path4) <-> -at(X,T,s3) & -at(X,T,s1))) # label(freeRoute4) # label(axiom).
(all X all T (free(X,path5) <-> -at(X,T,s3) & -at(X,T,s2))) # label(freeRoute5) # label(axiom).
(all X all T (free(X,path6) <-> -at(X,T,s4) & -at(X,T,s1))) # label(freeRoute6) # label(axiom).
(all X all T (free(X,path7) <-> -at(X,T,s4) & -at(X,T,s2))) # label(freeRoute7) # label(axiom).
(all X (nonconflicting(X,path0) <-> free(X,path0) & free(X,path1) & free(X,path2) & free(X,path3) & free(X,path4) & free(X,path5) & free(X,path6))) # label(nonconflicting0) # label(axiom).
(all X (nonconflicting(X,path1) <-> free(X,path1) & free(X,path0) & free(X,path2) & free(X,path3) & free(X,path4) & free(X,path5) & free(X,path7))) # label(nonconflicting1) # label(axiom).
(all X (nonconflicting(X,path2) <-> free(X,path2) & free(X,path0) & free(X,path1) & free(X,path3) & free(X,path4) & free(X,path6) & free(X,path7))) # label(nonconflicting2) # label(axiom).
(all X (nonconflicting(X,path3) <-> free(X,path3) & free(X,path0) & free(X,path1) & free(X,path2) & free(X,path5) & free(X,path6) & free(X,path7))) # label(nonconflicting3) # label(axiom).
(all X (nonconflicting(X,path4) <-> free(X,path4) & free(X,path0) & free(X,path1) & free(X,path2) & free(X,path5) & free(X,path6) & free(X,path7))) # label(nonconflicting4) # label(axiom).
(all X (nonconflicting(X,path5) <-> free(X,path5) & free(X,path0) & free(X,path1) & free(X,path3) & free(X,path4) & free(X,path6) & free(X,path7))) # label(nonconflicting5) # label(axiom).
(all X (nonconflicting(X,path6) <-> free(X,path6) & free(X,path0) & free(X,path2) & free(X,path3) & free(X,path4) & free(X,path5) & free(X,path7))) # label(nonconflicting6) # label(axiom).
(all X (nonconflicting(X,path7) <-> free(X,path7) & free(X,path1) & free(X,path2) & free(X,path3) & free(X,path4) & free(X,path5) & free(X,path6))) # label(nonconflicting7) # label(axiom).
path0 != path1 & path0 != path2 & path0 != path3 & path0 != path4 & path0 != path5 & path0 != path6 & path0 != path7 & path1 != path2 & path1 != path3 & path1 != path4 & path1 != path5 & path1 != path6 & path1 != path7 & path2 != path3 & path2 != path4 & path2 != path5 & path2 != path6 & path2 != path7 & path3 != path4 & path3 != path5 & path3 != path6 & path3 != path7 & path4 != path5 & path4 != path6 & path4 != path7 & path5 != path6 & path5 != path7 & path6 != path7 # label(routesExclusivity) # label(axiom).
(all X (available(X,path0) <-> nonconflicting(X,path0) & configuration(X,path0))) # label(availableRoute0) # label(axiom).
(all X (available(X,path1) <-> nonconflicting(X,path1) & configuration(X,path1))) # label(availableRoute1) # label(axiom).
(all X (available(X,path2) <-> nonconflicting(X,path2) & configuration(X,path2))) # label(availableRoute2) # label(axiom).
(all X (available(X,path3) <-> nonconflicting(X,path3) & configuration(X,path3))) # label(availableRoute3) # label(axiom).
(all X (available(X,path4) <-> nonconflicting(X,path4) & configuration(X,path4))) # label(availableRoute4) # label(axiom).
(all X (available(X,path5) <-> nonconflicting(X,path5) & configuration(X,path5))) # label(availableRoute5) # label(axiom).
(all X (available(X,path6) <-> nonconflicting(X,path6) & configuration(X,path6))) # label(availableRoute6) # label(axiom).
(all X (available(X,path7) <-> nonconflicting(X,path7) & configuration(X,path7))) # label(availableRoute7) # label(axiom).
(all X exists T (wantsToGo(X,in2,out2) <-> at(X,T,in2) & goal(T) = out2)) # label(wantsToGoin2out2) # label(axiom).
(all X exists T (wantsToGo(X,in2,out1) <-> at(X,T,in2) & goal(T) = out1)) # label(wantsToGoin2out1) # label(axiom).
(all X exists T (wantsToGo(X,in1,out2) <-> at(X,T,in1) & goal(T) = out2)) # label(wantsToGoin1out2) # label(axiom).
(all X exists T (wantsToGo(X,in1,out1) <-> at(X,T,in1) & goal(T) = out1)) # label(wantsToGoin1out1) # label(axiom).
(all X (toBeUsed(X,path0) <-> available(X,path0) & clockOrder(X) = in1 & wantsToGo(X,in1,out2))) # label(pathToBeUsed0) # label(axiom).
(all X (toBeUsed(X,path1) <-> available(X,path1) & clockOrder(X) = in2 & wantsToGo(X,in2,out2))) # label(pathToBeUsed1) # label(axiom).
(all X (toBeUsed(X,path2) <-> available(X,path2) & clockOrder(X) = in1 & wantsToGo(X,in1,out2))) # label(pathToBeUsed2) # label(axiom).
(all X (toBeUsed(X,path3) <-> available(X,path3) & clockOrder(X) = in2 & wantsToGo(X,in2,out2))) # label(pathToBeUsed3) # label(axiom).
(all X (toBeUsed(X,path4) <-> available(X,path4) & clockOrder(X) = in1 & wantsToGo(X,in1,out1))) # label(pathToBeUsed4) # label(axiom).
(all X (toBeUsed(X,path5) <-> available(X,path5) & clockOrder(X) = in2 & wantsToGo(X,in2,out1))) # label(pathToBeUsed5) # label(axiom).
(all X (toBeUsed(X,path6) <-> available(X,path6) & clockOrder(X) = in1 & wantsToGo(X,in1,out1))) # label(pathToBeUsed6) # label(axiom).
(all X (toBeUsed(X,path7) <-> available(X,path7) & clockOrder(X) = in2 & wantsToGo(X,in2,out1))) # label(pathToBeUsed7) # label(axiom).
(all X all P (configuration(succ(X),P) <-> configuration(X,P) & -free(X,P) | toBeUsed(X,P))) # label(setPath) # label(axiom).
(all X (open(succ(X),in2) <-> toBeUsed(X,path1) | toBeUsed(X,path3) | toBeUsed(X,path5) | toBeUsed(X,path7))) # label(openGatein2) # label(axiom).
(all X (open(succ(X),in1) <-> toBeUsed(X,path0) | toBeUsed(X,path2) | toBeUsed(X,path4) | toBeUsed(X,path6))) # label(openGatein1) # label(axiom).
end_of_list.

formulas(goals).
(all X all T (at(X,T,s4) & at(succ(X),T,s4) -> switch(X,s4) = switch(succ(X),s4))) # label(changeOnlyWithoutTrain) # label(conjecture).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom) # label(non_clause).  [assumption].
2 (all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom) # label(non_clause).  [assumption].
3 (all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom) # label(non_clause).  [assumption].
4 (all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom) # label(non_clause).  [assumption].
5 (all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom) # label(non_clause).  [assumption].
6 (all X all T go(X,T)) # label(goIfItsPossible) # label(axiom) # label(non_clause).  [assumption].
7 (all X exists Y appear(X,Y,in2)) # label(alwaysAppearsin2) # label(axiom) # label(non_clause).  [assumption].
8 (all X exists Y appear(X,Y,in1)) # label(alwaysAppearsin1) # label(axiom) # label(non_clause).  [assumption].
9 (all X all T (train(T) -> (exists X2 (less(X,X2) & go(X2,T))))) # label(go) # label(axiom) # label(non_clause).  [assumption].
10 (all X all T (train(T) & go(X,T) & (switch(X,s3) = out2 & at(X,T,s3) | switch(X,s4) = out2 & at(X,T,s4)) <-> at(succ(X),T,out2))) # label(out2ax1) # label(axiom) # label(non_clause).  [assumption].
11 (all X all T (train(T) & go(X,T) & (switch(X,s3) = out1 & at(X,T,s3) | switch(X,s4) = out1 & at(X,T,s4)) <-> at(succ(X),T,out1))) # label(out1ax1) # label(axiom) # label(non_clause).  [assumption].
12 (all X all T (train(T) & go(X,T) & (switch(X,s1) = s3 & at(X,T,s1) | switch(X,s2) = s3 & at(X,T,s2)) <-> at(succ(X),T,s3))) # label(s3ax1) # label(axiom) # label(non_clause).  [assumption].
13 (all X all T (train(T) & go(X,T) & (switch(X,s1) = s4 & at(X,T,s1) | switch(X,s2) = s4 & at(X,T,s2)) <-> at(succ(X),T,s4))) # label(s4ax1) # label(axiom) # label(non_clause).  [assumption].
14 (all X all T (train(T) & go(X,T) & open(X,in2) & at(X,T,in2) <-> at(succ(X),T,s2))) # label(s2ax1) # label(axiom) # label(non_clause).  [assumption].
15 (all X all T (train(T) & go(X,T) & open(X,in1) & at(X,T,in1) <-> at(succ(X),T,s1))) # label(s1ax1) # label(axiom) # label(non_clause).  [assumption].
16 in2 != in1 & in2 != s2 & in2 != s1 & in2 != out2 & in2 != out1 & in2 != s3 & in2 != s4 & in1 != s2 & in1 != s1 & in1 != out2 & in1 != out1 & in1 != s3 & in1 != s4 & s2 != s1 & s2 != out2 & s2 != out1 & s2 != s3 & s2 != s4 & s1 != out2 & s1 != out1 & s1 != s3 & s1 != s4 & out2 != out1 & out2 != s3 & out2 != s4 & out1 != s3 & out1 != s4 & s3 != s4 # label(nodesExclusivity) # label(axiom) # label(non_clause).  [assumption].
17 (all X all T (at(X,T,out2) -> -at(succ(X),T,out2))) # label(disappearout2) # label(axiom) # label(non_clause).  [assumption].
18 (all X all T (at(X,T,out1) -> -at(succ(X),T,out1))) # label(disappearout1) # label(axiom) # label(non_clause).  [assumption].
19 (all X all T all N1 all N2 (at(X,T,N1) & at(X,T,N2) -> N1 = N2)) # label(positionInOneNodeAtTime) # label(axiom) # label(non_clause).  [assumption].
20 (all X all T1 all T2 (at(X,T1,in2) & T1 != T2 -> -at(X,T2,in2))) # label(onlyOneTrainin2) # label(axiom) # label(non_clause).  [assumption].
21 (all X all T1 all T2 (at(X,T1,in1) & T1 != T2 -> -at(X,T2,in1))) # label(onlyOneTrainin1) # label(axiom) # label(non_clause).  [assumption].
22 (all X all T (at(succ(X),T,in2) <-> appear(X,T,in2) | at(X,T,in2) & (-go(X,T) | -open(X,in2)))) # label(appearin2) # label(axiom) # label(non_clause).  [assumption].
23 (all X all T (at(succ(X),T,in1) <-> appear(X,T,in1) | at(X,T,in1) & (-go(X,T) | -open(X,in1)))) # label(appearin1) # label(axiom) # label(non_clause).  [assumption].
24 (all T (goal(T) = out2 | goal(T) = out1)) # label(trainGoals) # label(axiom) # label(non_clause).  [assumption].
25 (all X (succ(X) != X -> (clockOrder(X) = in2 <-> clockOrder(succ(X)) = in1))) # label(clockOrderin2) # label(axiom) # label(non_clause).  [assumption].
26 (all X (succ(X) != X -> (clockOrder(X) = in1 <-> clockOrder(succ(X)) = in2))) # label(clockOrderin1) # label(axiom) # label(non_clause).  [assumption].
27 (all X (clockOrder(X) = in2 | clockOrder(X) = in1)) # label(clockPossibilities) # label(axiom) # label(non_clause).  [assumption].
28 (all X (configuration(X,path0) <-> switch(X,s3) = out2 & switch(X,s1) = s3)) # label(switchesConfiguration0) # label(axiom) # label(non_clause).  [assumption].
29 (all X (configuration(X,path1) <-> switch(X,s3) = out2 & switch(X,s2) = s3)) # label(switchesConfiguration1) # label(axiom) # label(non_clause).  [assumption].
30 (all X (configuration(X,path2) <-> switch(X,s4) = out2 & switch(X,s1) = s4)) # label(switchesConfiguration2) # label(axiom) # label(non_clause).  [assumption].
31 (all X (configuration(X,path3) <-> switch(X,s4) = out2 & switch(X,s2) = s4)) # label(switchesConfiguration3) # label(axiom) # label(non_clause).  [assumption].
32 (all X (configuration(X,path4) <-> switch(X,s3) = out1 & switch(X,s1) = s3)) # label(switchesConfiguration4) # label(axiom) # label(non_clause).  [assumption].
33 (all X (configuration(X,path5) <-> switch(X,s3) = out1 & switch(X,s2) = s3)) # label(switchesConfiguration5) # label(axiom) # label(non_clause).  [assumption].
34 (all X (configuration(X,path6) <-> switch(X,s4) = out1 & switch(X,s1) = s4)) # label(switchesConfiguration6) # label(axiom) # label(non_clause).  [assumption].
35 (all X (configuration(X,path7) <-> switch(X,s4) = out1 & switch(X,s2) = s4)) # label(switchesConfiguration7) # label(axiom) # label(non_clause).  [assumption].
36 (all X all T (free(X,path0) <-> -at(X,T,s3) & -at(X,T,s1))) # label(freeRoute0) # label(axiom) # label(non_clause).  [assumption].
37 (all X all T (free(X,path1) <-> -at(X,T,s3) & -at(X,T,s2))) # label(freeRoute1) # label(axiom) # label(non_clause).  [assumption].
38 (all X all T (free(X,path2) <-> -at(X,T,s4) & -at(X,T,s1))) # label(freeRoute2) # label(axiom) # label(non_clause).  [assumption].
39 (all X all T (free(X,path3) <-> -at(X,T,s4) & -at(X,T,s2))) # label(freeRoute3) # label(axiom) # label(non_clause).  [assumption].
40 (all X all T (free(X,path4) <-> -at(X,T,s3) & -at(X,T,s1))) # label(freeRoute4) # label(axiom) # label(non_clause).  [assumption].
41 (all X all T (free(X,path5) <-> -at(X,T,s3) & -at(X,T,s2))) # label(freeRoute5) # label(axiom) # label(non_clause).  [assumption].
42 (all X all T (free(X,path6) <-> -at(X,T,s4) & -at(X,T,s1))) # label(freeRoute6) # label(axiom) # label(non_clause).  [assumption].
43 (all X all T (free(X,path7) <-> -at(X,T,s4) & -at(X,T,s2))) # label(freeRoute7) # label(axiom) # label(non_clause).  [assumption].
44 (all X (nonconflicting(X,path0) <-> free(X,path0) & free(X,path1) & free(X,path2) & free(X,path3) & free(X,path4) & free(X,path5) & free(X,path6))) # label(nonconflicting0) # label(axiom) # label(non_clause).  [assumption].
45 (all X (nonconflicting(X,path1) <-> free(X,path1) & free(X,path0) & free(X,path2) & free(X,path3) & free(X,path4) & free(X,path5) & free(X,path7))) # label(nonconflicting1) # label(axiom) # label(non_clause).  [assumption].
46 (all X (nonconflicting(X,path2) <-> free(X,path2) & free(X,path0) & free(X,path1) & free(X,path3) & free(X,path4) & free(X,path6) & free(X,path7))) # label(nonconflicting2) # label(axiom) # label(non_clause).  [assumption].
47 (all X (nonconflicting(X,path3) <-> free(X,path3) & free(X,path0) & free(X,path1) & free(X,path2) & free(X,path5) & free(X,path6) & free(X,path7))) # label(nonconflicting3) # label(axiom) # label(non_clause).  [assumption].
48 (all X (nonconflicting(X,path4) <-> free(X,path4) & free(X,path0) & free(X,path1) & free(X,path2) & free(X,path5) & free(X,path6) & free(X,path7))) # label(nonconflicting4) # label(axiom) # label(non_clause).  [assumption].
49 (all X (nonconflicting(X,path5) <-> free(X,path5) & free(X,path0) & free(X,path1) & free(X,path3) & free(X,path4) & free(X,path6) & free(X,path7))) # label(nonconflicting5) # label(axiom) # label(non_clause).  [assumption].
50 (all X (nonconflicting(X,path6) <-> free(X,path6) & free(X,path0) & free(X,path2) & free(X,path3) & free(X,path4) & free(X,path5) & free(X,path7))) # label(nonconflicting6) # label(axiom) # label(non_clause).  [assumption].
51 (all X (nonconflicting(X,path7) <-> free(X,path7) & free(X,path1) & free(X,path2) & free(X,path3) & free(X,path4) & free(X,path5) & free(X,path6))) # label(nonconflicting7) # label(axiom) # label(non_clause).  [assumption].
52 path0 != path1 & path0 != path2 & path0 != path3 & path0 != path4 & path0 != path5 & path0 != path6 & path0 != path7 & path1 != path2 & path1 != path3 & path1 != path4 & path1 != path5 & path1 != path6 & path1 != path7 & path2 != path3 & path2 != path4 & path2 != path5 & path2 != path6 & path2 != path7 & path3 != path4 & path3 != path5 & path3 != path6 & path3 != path7 & path4 != path5 & path4 != path6 & path4 != path7 & path5 != path6 & path5 != path7 & path6 != path7 # label(routesExclusivity) # label(axiom) # label(non_clause).  [assumption].
53 (all X (available(X,path0) <-> nonconflicting(X,path0) & configuration(X,path0))) # label(availableRoute0) # label(axiom) # label(non_clause).  [assumption].
54 (all X (available(X,path1) <-> nonconflicting(X,path1) & configuration(X,path1))) # label(availableRoute1) # label(axiom) # label(non_clause).  [assumption].
55 (all X (available(X,path2) <-> nonconflicting(X,path2) & configuration(X,path2))) # label(availableRoute2) # label(axiom) # label(non_clause).  [assumption].
56 (all X (available(X,path3) <-> nonconflicting(X,path3) & configuration(X,path3))) # label(availableRoute3) # label(axiom) # label(non_clause).  [assumption].
57 (all X (available(X,path4) <-> nonconflicting(X,path4) & configuration(X,path4))) # label(availableRoute4) # label(axiom) # label(non_clause).  [assumption].
58 (all X (available(X,path5) <-> nonconflicting(X,path5) & configuration(X,path5))) # label(availableRoute5) # label(axiom) # label(non_clause).  [assumption].
59 (all X (available(X,path6) <-> nonconflicting(X,path6) & configuration(X,path6))) # label(availableRoute6) # label(axiom) # label(non_clause).  [assumption].
60 (all X (available(X,path7) <-> nonconflicting(X,path7) & configuration(X,path7))) # label(availableRoute7) # label(axiom) # label(non_clause).  [assumption].
61 (all X exists T (wantsToGo(X,in2,out2) <-> at(X,T,in2) & goal(T) = out2)) # label(wantsToGoin2out2) # label(axiom) # label(non_clause).  [assumption].
62 (all X exists T (wantsToGo(X,in2,out1) <-> at(X,T,in2) & goal(T) = out1)) # label(wantsToGoin2out1) # label(axiom) # label(non_clause).  [assumption].
63 (all X exists T (wantsToGo(X,in1,out2) <-> at(X,T,in1) & goal(T) = out2)) # label(wantsToGoin1out2) # label(axiom) # label(non_clause).  [assumption].
64 (all X exists T (wantsToGo(X,in1,out1) <-> at(X,T,in1) & goal(T) = out1)) # label(wantsToGoin1out1) # label(axiom) # label(non_clause).  [assumption].
65 (all X (toBeUsed(X,path0) <-> available(X,path0) & clockOrder(X) = in1 & wantsToGo(X,in1,out2))) # label(pathToBeUsed0) # label(axiom) # label(non_clause).  [assumption].
66 (all X (toBeUsed(X,path1) <-> available(X,path1) & clockOrder(X) = in2 & wantsToGo(X,in2,out2))) # label(pathToBeUsed1) # label(axiom) # label(non_clause).  [assumption].
67 (all X (toBeUsed(X,path2) <-> available(X,path2) & clockOrder(X) = in1 & wantsToGo(X,in1,out2))) # label(pathToBeUsed2) # label(axiom) # label(non_clause).  [assumption].
68 (all X (toBeUsed(X,path3) <-> available(X,path3) & clockOrder(X) = in2 & wantsToGo(X,in2,out2))) # label(pathToBeUsed3) # label(axiom) # label(non_clause).  [assumption].
69 (all X (toBeUsed(X,path4) <-> available(X,path4) & clockOrder(X) = in1 & wantsToGo(X,in1,out1))) # label(pathToBeUsed4) # label(axiom) # label(non_clause).  [assumption].
70 (all X (toBeUsed(X,path5) <-> available(X,path5) & clockOrder(X) = in2 & wantsToGo(X,in2,out1))) # label(pathToBeUsed5) # label(axiom) # label(non_clause).  [assumption].
71 (all X (toBeUsed(X,path6) <-> available(X,path6) & clockOrder(X) = in1 & wantsToGo(X,in1,out1))) # label(pathToBeUsed6) # label(axiom) # label(non_clause).  [assumption].
72 (all X (toBeUsed(X,path7) <-> available(X,path7) & clockOrder(X) = in2 & wantsToGo(X,in2,out1))) # label(pathToBeUsed7) # label(axiom) # label(non_clause).  [assumption].
73 (all X all P (configuration(succ(X),P) <-> configuration(X,P) & -free(X,P) | toBeUsed(X,P))) # label(setPath) # label(axiom) # label(non_clause).  [assumption].
74 (all X (open(succ(X),in2) <-> toBeUsed(X,path1) | toBeUsed(X,path3) | toBeUsed(X,path5) | toBeUsed(X,path7))) # label(openGatein2) # label(axiom) # label(non_clause).  [assumption].
75 (all X (open(succ(X),in1) <-> toBeUsed(X,path0) | toBeUsed(X,path2) | toBeUsed(X,path4) | toBeUsed(X,path6))) # label(openGatein1) # label(axiom) # label(non_clause).  [assumption].
76 (all X all T (at(X,T,s4) & at(succ(X),T,s4) -> switch(X,s4) = switch(succ(X),s4))) # label(changeOnlyWithoutTrain) # label(conjecture) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
-less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
go(A,B) # label(goIfItsPossible) # label(axiom).  [clausify(6)].
appear(A,f1(A),in2) # label(alwaysAppearsin2) # label(axiom).  [clausify(7)].
appear(A,f2(A),in1) # label(alwaysAppearsin1) # label(axiom).  [clausify(8)].
-train(A) | less(B,f3(B,A)) # label(go) # label(axiom).  [clausify(9)].
-train(A) | go(f3(B,A),A) # label(go) # label(axiom).  [clausify(9)].
-train(A) | -go(B,A) | switch(B,s3) != out2 | -at(B,A,s3) | at(succ(B),A,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
-train(A) | -go(B,A) | switch(B,s4) != out2 | -at(B,A,s4) | at(succ(B),A,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
train(A) | -at(succ(B),A,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
go(A,B) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
switch(A,s3) = out2 | switch(A,s4) = out2 | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
switch(A,s3) = out2 | at(A,B,s4) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
at(A,B,s3) | switch(A,s4) = out2 | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
at(A,B,s3) | at(A,B,s4) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
-train(A) | -go(B,A) | switch(B,s3) != out1 | -at(B,A,s3) | at(succ(B),A,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
-train(A) | -go(B,A) | switch(B,s4) != out1 | -at(B,A,s4) | at(succ(B),A,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
train(A) | -at(succ(B),A,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
go(A,B) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
switch(A,s3) = out1 | switch(A,s4) = out1 | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
switch(A,s3) = out1 | at(A,B,s4) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
at(A,B,s3) | switch(A,s4) = out1 | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
at(A,B,s3) | at(A,B,s4) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
-train(A) | -go(B,A) | switch(B,s1) != s3 | -at(B,A,s1) | at(succ(B),A,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
-train(A) | -go(B,A) | switch(B,s2) != s3 | -at(B,A,s2) | at(succ(B),A,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
train(A) | -at(succ(B),A,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
go(A,B) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
switch(A,s1) = s3 | switch(A,s2) = s3 | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
switch(A,s1) = s3 | at(A,B,s2) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
at(A,B,s1) | switch(A,s2) = s3 | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
-train(A) | -go(B,A) | switch(B,s1) != s4 | -at(B,A,s1) | at(succ(B),A,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
-train(A) | -go(B,A) | switch(B,s2) != s4 | -at(B,A,s2) | at(succ(B),A,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
train(A) | -at(succ(B),A,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
go(A,B) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
switch(A,s1) = s4 | switch(A,s2) = s4 | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
switch(A,s1) = s4 | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
at(A,B,s1) | switch(A,s2) = s4 | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
-train(A) | -go(B,A) | -open(B,in2) | -at(B,A,in2) | at(succ(B),A,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
train(A) | -at(succ(B),A,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
go(A,B) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
open(A,in2) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
at(A,B,in2) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
-train(A) | -go(B,A) | -open(B,in1) | -at(B,A,in1) | at(succ(B),A,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
train(A) | -at(succ(B),A,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
go(A,B) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
open(A,in1) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
at(A,B,in1) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
in1 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s2 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s1 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
out2 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
out1 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s3 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s4 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s2 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s1 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
out2 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
out1 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s3 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s4 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s2 != s1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s2 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s2 != out1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s2 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s2 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s1 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s1 != out1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s1 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
out1 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
out2 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s4 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
out1 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
out1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
s4 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
-at(A,B,out2) | -at(succ(A),B,out2) # label(disappearout2) # label(axiom).  [clausify(17)].
-at(A,B,out1) | -at(succ(A),B,out1) # label(disappearout1) # label(axiom).  [clausify(18)].
-at(A,B,C) | -at(A,B,D) | D = C # label(positionInOneNodeAtTime) # label(axiom).  [clausify(19)].
-at(A,B,in2) | C = B | -at(A,C,in2) # label(onlyOneTrainin2) # label(axiom).  [clausify(20)].
-at(A,B,in1) | C = B | -at(A,C,in1) # label(onlyOneTrainin1) # label(axiom).  [clausify(21)].
-at(succ(A),B,in2) | appear(A,B,in2) | at(A,B,in2) # label(appearin2) # label(axiom).  [clausify(22)].
-at(succ(A),B,in2) | appear(A,B,in2) | -go(A,B) | -open(A,in2) # label(appearin2) # label(axiom).  [clausify(22)].
at(succ(A),B,in2) | -appear(A,B,in2) # label(appearin2) # label(axiom).  [clausify(22)].
at(succ(A),B,in2) | -at(A,B,in2) | go(A,B) # label(appearin2) # label(axiom).  [clausify(22)].
at(succ(A),B,in2) | -at(A,B,in2) | open(A,in2) # label(appearin2) # label(axiom).  [clausify(22)].
-at(succ(A),B,in1) | appear(A,B,in1) | at(A,B,in1) # label(appearin1) # label(axiom).  [clausify(23)].
-at(succ(A),B,in1) | appear(A,B,in1) | -go(A,B) | -open(A,in1) # label(appearin1) # label(axiom).  [clausify(23)].
at(succ(A),B,in1) | -appear(A,B,in1) # label(appearin1) # label(axiom).  [clausify(23)].
at(succ(A),B,in1) | -at(A,B,in1) | go(A,B) # label(appearin1) # label(axiom).  [clausify(23)].
at(succ(A),B,in1) | -at(A,B,in1) | open(A,in1) # label(appearin1) # label(axiom).  [clausify(23)].
goal(A) = out2 | goal(A) = out1 # label(trainGoals) # label(axiom).  [clausify(24)].
succ(A) = A | clockOrder(A) != in2 | clockOrder(succ(A)) = in1 # label(clockOrderin2) # label(axiom).  [clausify(25)].
succ(A) = A | clockOrder(A) = in2 | clockOrder(succ(A)) != in1 # label(clockOrderin2) # label(axiom).  [clausify(25)].
succ(A) = A | clockOrder(A) != in1 | clockOrder(succ(A)) = in2 # label(clockOrderin1) # label(axiom).  [clausify(26)].
succ(A) = A | clockOrder(A) = in1 | clockOrder(succ(A)) != in2 # label(clockOrderin1) # label(axiom).  [clausify(26)].
clockOrder(A) = in2 | clockOrder(A) = in1 # label(clockPossibilities) # label(axiom).  [clausify(27)].
-configuration(A,path0) | switch(A,s3) = out2 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
-configuration(A,path0) | switch(A,s1) = s3 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
configuration(A,path0) | switch(A,s3) != out2 | switch(A,s1) != s3 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
-configuration(A,path1) | switch(A,s3) = out2 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
-configuration(A,path1) | switch(A,s2) = s3 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
configuration(A,path1) | switch(A,s3) != out2 | switch(A,s2) != s3 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
-configuration(A,path2) | switch(A,s4) = out2 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
-configuration(A,path2) | switch(A,s1) = s4 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
configuration(A,path2) | switch(A,s4) != out2 | switch(A,s1) != s4 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
-configuration(A,path3) | switch(A,s4) = out2 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
-configuration(A,path3) | switch(A,s2) = s4 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
configuration(A,path3) | switch(A,s4) != out2 | switch(A,s2) != s4 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
-configuration(A,path4) | switch(A,s3) = out1 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
-configuration(A,path4) | switch(A,s1) = s3 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
configuration(A,path4) | switch(A,s3) != out1 | switch(A,s1) != s3 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
-configuration(A,path5) | switch(A,s3) = out1 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
-configuration(A,path5) | switch(A,s2) = s3 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
configuration(A,path5) | switch(A,s3) != out1 | switch(A,s2) != s3 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
-configuration(A,path6) | switch(A,s4) = out1 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
-configuration(A,path6) | switch(A,s1) = s4 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
configuration(A,path6) | switch(A,s4) != out1 | switch(A,s1) != s4 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
-configuration(A,path7) | switch(A,s4) = out1 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
-configuration(A,path7) | switch(A,s2) = s4 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
configuration(A,path7) | switch(A,s4) != out1 | switch(A,s2) != s4 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
-free(A,path0) | -at(A,B,s3) # label(freeRoute0) # label(axiom).  [clausify(36)].
-free(A,path0) | -at(A,B,s1) # label(freeRoute0) # label(axiom).  [clausify(36)].
free(A,path0) | at(A,B,s3) | at(A,B,s1) # label(freeRoute0) # label(axiom).  [clausify(36)].
-free(A,path1) | -at(A,B,s3) # label(freeRoute1) # label(axiom).  [clausify(37)].
-free(A,path1) | -at(A,B,s2) # label(freeRoute1) # label(axiom).  [clausify(37)].
free(A,path1) | at(A,B,s3) | at(A,B,s2) # label(freeRoute1) # label(axiom).  [clausify(37)].
-free(A,path2) | -at(A,B,s4) # label(freeRoute2) # label(axiom).  [clausify(38)].
-free(A,path2) | -at(A,B,s1) # label(freeRoute2) # label(axiom).  [clausify(38)].
free(A,path2) | at(A,B,s4) | at(A,B,s1) # label(freeRoute2) # label(axiom).  [clausify(38)].
-free(A,path3) | -at(A,B,s4) # label(freeRoute3) # label(axiom).  [clausify(39)].
-free(A,path3) | -at(A,B,s2) # label(freeRoute3) # label(axiom).  [clausify(39)].
free(A,path3) | at(A,B,s4) | at(A,B,s2) # label(freeRoute3) # label(axiom).  [clausify(39)].
-free(A,path4) | -at(A,B,s3) # label(freeRoute4) # label(axiom).  [clausify(40)].
-free(A,path4) | -at(A,B,s1) # label(freeRoute4) # label(axiom).  [clausify(40)].
free(A,path4) | at(A,B,s3) | at(A,B,s1) # label(freeRoute4) # label(axiom).  [clausify(40)].
-free(A,path5) | -at(A,B,s3) # label(freeRoute5) # label(axiom).  [clausify(41)].
-free(A,path5) | -at(A,B,s2) # label(freeRoute5) # label(axiom).  [clausify(41)].
free(A,path5) | at(A,B,s3) | at(A,B,s2) # label(freeRoute5) # label(axiom).  [clausify(41)].
-free(A,path6) | -at(A,B,s4) # label(freeRoute6) # label(axiom).  [clausify(42)].
-free(A,path6) | -at(A,B,s1) # label(freeRoute6) # label(axiom).  [clausify(42)].
free(A,path6) | at(A,B,s4) | at(A,B,s1) # label(freeRoute6) # label(axiom).  [clausify(42)].
-free(A,path7) | -at(A,B,s4) # label(freeRoute7) # label(axiom).  [clausify(43)].
-free(A,path7) | -at(A,B,s2) # label(freeRoute7) # label(axiom).  [clausify(43)].
free(A,path7) | at(A,B,s4) | at(A,B,s2) # label(freeRoute7) # label(axiom).  [clausify(43)].
-nonconflicting(A,path0) | free(A,path0) # label(nonconflicting0) # label(axiom).  [clausify(44)].
-nonconflicting(A,path0) | free(A,path1) # label(nonconflicting0) # label(axiom).  [clausify(44)].
-nonconflicting(A,path0) | free(A,path2) # label(nonconflicting0) # label(axiom).  [clausify(44)].
-nonconflicting(A,path0) | free(A,path3) # label(nonconflicting0) # label(axiom).  [clausify(44)].
-nonconflicting(A,path0) | free(A,path4) # label(nonconflicting0) # label(axiom).  [clausify(44)].
-nonconflicting(A,path0) | free(A,path5) # label(nonconflicting0) # label(axiom).  [clausify(44)].
-nonconflicting(A,path0) | free(A,path6) # label(nonconflicting0) # label(axiom).  [clausify(44)].
nonconflicting(A,path0) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path6) # label(nonconflicting0) # label(axiom).  [clausify(44)].
-nonconflicting(A,path1) | free(A,path1) # label(nonconflicting1) # label(axiom).  [clausify(45)].
-nonconflicting(A,path1) | free(A,path0) # label(nonconflicting1) # label(axiom).  [clausify(45)].
-nonconflicting(A,path1) | free(A,path2) # label(nonconflicting1) # label(axiom).  [clausify(45)].
-nonconflicting(A,path1) | free(A,path3) # label(nonconflicting1) # label(axiom).  [clausify(45)].
-nonconflicting(A,path1) | free(A,path4) # label(nonconflicting1) # label(axiom).  [clausify(45)].
-nonconflicting(A,path1) | free(A,path5) # label(nonconflicting1) # label(axiom).  [clausify(45)].
-nonconflicting(A,path1) | free(A,path7) # label(nonconflicting1) # label(axiom).  [clausify(45)].
nonconflicting(A,path1) | -free(A,path1) | -free(A,path0) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path7) # label(nonconflicting1) # label(axiom).  [clausify(45)].
-nonconflicting(A,path2) | free(A,path2) # label(nonconflicting2) # label(axiom).  [clausify(46)].
-nonconflicting(A,path2) | free(A,path0) # label(nonconflicting2) # label(axiom).  [clausify(46)].
-nonconflicting(A,path2) | free(A,path1) # label(nonconflicting2) # label(axiom).  [clausify(46)].
-nonconflicting(A,path2) | free(A,path3) # label(nonconflicting2) # label(axiom).  [clausify(46)].
-nonconflicting(A,path2) | free(A,path4) # label(nonconflicting2) # label(axiom).  [clausify(46)].
-nonconflicting(A,path2) | free(A,path6) # label(nonconflicting2) # label(axiom).  [clausify(46)].
-nonconflicting(A,path2) | free(A,path7) # label(nonconflicting2) # label(axiom).  [clausify(46)].
nonconflicting(A,path2) | -free(A,path2) | -free(A,path0) | -free(A,path1) | -free(A,path3) | -free(A,path4) | -free(A,path6) | -free(A,path7) # label(nonconflicting2) # label(axiom).  [clausify(46)].
-nonconflicting(A,path3) | free(A,path3) # label(nonconflicting3) # label(axiom).  [clausify(47)].
-nonconflicting(A,path3) | free(A,path0) # label(nonconflicting3) # label(axiom).  [clausify(47)].
-nonconflicting(A,path3) | free(A,path1) # label(nonconflicting3) # label(axiom).  [clausify(47)].
-nonconflicting(A,path3) | free(A,path2) # label(nonconflicting3) # label(axiom).  [clausify(47)].
-nonconflicting(A,path3) | free(A,path5) # label(nonconflicting3) # label(axiom).  [clausify(47)].
-nonconflicting(A,path3) | free(A,path6) # label(nonconflicting3) # label(axiom).  [clausify(47)].
-nonconflicting(A,path3) | free(A,path7) # label(nonconflicting3) # label(axiom).  [clausify(47)].
nonconflicting(A,path3) | -free(A,path3) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path5) | -free(A,path6) | -free(A,path7) # label(nonconflicting3) # label(axiom).  [clausify(47)].
-nonconflicting(A,path4) | free(A,path4) # label(nonconflicting4) # label(axiom).  [clausify(48)].
-nonconflicting(A,path4) | free(A,path0) # label(nonconflicting4) # label(axiom).  [clausify(48)].
-nonconflicting(A,path4) | free(A,path1) # label(nonconflicting4) # label(axiom).  [clausify(48)].
-nonconflicting(A,path4) | free(A,path2) # label(nonconflicting4) # label(axiom).  [clausify(48)].
-nonconflicting(A,path4) | free(A,path5) # label(nonconflicting4) # label(axiom).  [clausify(48)].
-nonconflicting(A,path4) | free(A,path6) # label(nonconflicting4) # label(axiom).  [clausify(48)].
-nonconflicting(A,path4) | free(A,path7) # label(nonconflicting4) # label(axiom).  [clausify(48)].
nonconflicting(A,path4) | -free(A,path4) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path5) | -free(A,path6) | -free(A,path7) # label(nonconflicting4) # label(axiom).  [clausify(48)].
-nonconflicting(A,path5) | free(A,path5) # label(nonconflicting5) # label(axiom).  [clausify(49)].
-nonconflicting(A,path5) | free(A,path0) # label(nonconflicting5) # label(axiom).  [clausify(49)].
-nonconflicting(A,path5) | free(A,path1) # label(nonconflicting5) # label(axiom).  [clausify(49)].
-nonconflicting(A,path5) | free(A,path3) # label(nonconflicting5) # label(axiom).  [clausify(49)].
-nonconflicting(A,path5) | free(A,path4) # label(nonconflicting5) # label(axiom).  [clausify(49)].
-nonconflicting(A,path5) | free(A,path6) # label(nonconflicting5) # label(axiom).  [clausify(49)].
-nonconflicting(A,path5) | free(A,path7) # label(nonconflicting5) # label(axiom).  [clausify(49)].
nonconflicting(A,path5) | -free(A,path5) | -free(A,path0) | -free(A,path1) | -free(A,path3) | -free(A,path4) | -free(A,path6) | -free(A,path7) # label(nonconflicting5) # label(axiom).  [clausify(49)].
-nonconflicting(A,path6) | free(A,path6) # label(nonconflicting6) # label(axiom).  [clausify(50)].
-nonconflicting(A,path6) | free(A,path0) # label(nonconflicting6) # label(axiom).  [clausify(50)].
-nonconflicting(A,path6) | free(A,path2) # label(nonconflicting6) # label(axiom).  [clausify(50)].
-nonconflicting(A,path6) | free(A,path3) # label(nonconflicting6) # label(axiom).  [clausify(50)].
-nonconflicting(A,path6) | free(A,path4) # label(nonconflicting6) # label(axiom).  [clausify(50)].
-nonconflicting(A,path6) | free(A,path5) # label(nonconflicting6) # label(axiom).  [clausify(50)].
-nonconflicting(A,path6) | free(A,path7) # label(nonconflicting6) # label(axiom).  [clausify(50)].
nonconflicting(A,path6) | -free(A,path6) | -free(A,path0) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path7) # label(nonconflicting6) # label(axiom).  [clausify(50)].
-nonconflicting(A,path7) | free(A,path7) # label(nonconflicting7) # label(axiom).  [clausify(51)].
-nonconflicting(A,path7) | free(A,path1) # label(nonconflicting7) # label(axiom).  [clausify(51)].
-nonconflicting(A,path7) | free(A,path2) # label(nonconflicting7) # label(axiom).  [clausify(51)].
-nonconflicting(A,path7) | free(A,path3) # label(nonconflicting7) # label(axiom).  [clausify(51)].
-nonconflicting(A,path7) | free(A,path4) # label(nonconflicting7) # label(axiom).  [clausify(51)].
-nonconflicting(A,path7) | free(A,path5) # label(nonconflicting7) # label(axiom).  [clausify(51)].
-nonconflicting(A,path7) | free(A,path6) # label(nonconflicting7) # label(axiom).  [clausify(51)].
nonconflicting(A,path7) | -free(A,path7) | -free(A,path1) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path6) # label(nonconflicting7) # label(axiom).  [clausify(51)].
path1 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path2 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path3 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path4 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path5 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path6 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path7 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path2 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path3 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path4 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path5 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path6 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path7 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path3 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path4 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path5 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path6 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path7 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path4 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path5 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path6 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path7 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path5 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path6 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path7 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path6 != path5 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path7 != path5 # label(routesExclusivity) # label(axiom).  [clausify(52)].
path7 != path6 # label(routesExclusivity) # label(axiom).  [clausify(52)].
-available(A,path0) | nonconflicting(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
-available(A,path0) | configuration(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
available(A,path0) | -nonconflicting(A,path0) | -configuration(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
-available(A,path1) | nonconflicting(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
-available(A,path1) | configuration(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
available(A,path1) | -nonconflicting(A,path1) | -configuration(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
-available(A,path2) | nonconflicting(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
-available(A,path2) | configuration(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
available(A,path2) | -nonconflicting(A,path2) | -configuration(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
-available(A,path3) | nonconflicting(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
-available(A,path3) | configuration(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
available(A,path3) | -nonconflicting(A,path3) | -configuration(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
-available(A,path4) | nonconflicting(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
-available(A,path4) | configuration(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
available(A,path4) | -nonconflicting(A,path4) | -configuration(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
-available(A,path5) | nonconflicting(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
-available(A,path5) | configuration(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
available(A,path5) | -nonconflicting(A,path5) | -configuration(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
-available(A,path6) | nonconflicting(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
-available(A,path6) | configuration(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
available(A,path6) | -nonconflicting(A,path6) | -configuration(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
-available(A,path7) | nonconflicting(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
-available(A,path7) | configuration(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
available(A,path7) | -nonconflicting(A,path7) | -configuration(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
-wantsToGo(A,in2,out2) | at(A,f4(A),in2) # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
-wantsToGo(A,in2,out2) | goal(f4(A)) = out2 # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
wantsToGo(A,in2,out2) | -at(A,f4(A),in2) | goal(f4(A)) != out2 # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
-wantsToGo(A,in2,out1) | at(A,f5(A),in2) # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
-wantsToGo(A,in2,out1) | goal(f5(A)) = out1 # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
wantsToGo(A,in2,out1) | -at(A,f5(A),in2) | goal(f5(A)) != out1 # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
-wantsToGo(A,in1,out2) | at(A,f6(A),in1) # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
-wantsToGo(A,in1,out2) | goal(f6(A)) = out2 # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
wantsToGo(A,in1,out2) | -at(A,f6(A),in1) | goal(f6(A)) != out2 # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
-wantsToGo(A,in1,out1) | at(A,f7(A),in1) # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
-wantsToGo(A,in1,out1) | goal(f7(A)) = out1 # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
wantsToGo(A,in1,out1) | -at(A,f7(A),in1) | goal(f7(A)) != out1 # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
-toBeUsed(A,path0) | available(A,path0) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
-toBeUsed(A,path0) | clockOrder(A) = in1 # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
-toBeUsed(A,path0) | wantsToGo(A,in1,out2) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
toBeUsed(A,path0) | -available(A,path0) | clockOrder(A) != in1 | -wantsToGo(A,in1,out2) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
-toBeUsed(A,path1) | available(A,path1) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
-toBeUsed(A,path1) | clockOrder(A) = in2 # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
-toBeUsed(A,path1) | wantsToGo(A,in2,out2) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
toBeUsed(A,path1) | -available(A,path1) | clockOrder(A) != in2 | -wantsToGo(A,in2,out2) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
-toBeUsed(A,path2) | available(A,path2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
-toBeUsed(A,path2) | clockOrder(A) = in1 # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
-toBeUsed(A,path2) | wantsToGo(A,in1,out2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
toBeUsed(A,path2) | -available(A,path2) | clockOrder(A) != in1 | -wantsToGo(A,in1,out2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
-toBeUsed(A,path3) | available(A,path3) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
-toBeUsed(A,path3) | clockOrder(A) = in2 # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
-toBeUsed(A,path3) | wantsToGo(A,in2,out2) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
toBeUsed(A,path3) | -available(A,path3) | clockOrder(A) != in2 | -wantsToGo(A,in2,out2) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
-toBeUsed(A,path4) | available(A,path4) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
-toBeUsed(A,path4) | clockOrder(A) = in1 # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
-toBeUsed(A,path4) | wantsToGo(A,in1,out1) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
toBeUsed(A,path4) | -available(A,path4) | clockOrder(A) != in1 | -wantsToGo(A,in1,out1) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
-toBeUsed(A,path5) | available(A,path5) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
-toBeUsed(A,path5) | clockOrder(A) = in2 # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
-toBeUsed(A,path5) | wantsToGo(A,in2,out1) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
toBeUsed(A,path5) | -available(A,path5) | clockOrder(A) != in2 | -wantsToGo(A,in2,out1) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
-toBeUsed(A,path6) | available(A,path6) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
-toBeUsed(A,path6) | clockOrder(A) = in1 # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
-toBeUsed(A,path6) | wantsToGo(A,in1,out1) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
toBeUsed(A,path6) | -available(A,path6) | clockOrder(A) != in1 | -wantsToGo(A,in1,out1) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
-toBeUsed(A,path7) | available(A,path7) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
-toBeUsed(A,path7) | clockOrder(A) = in2 # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
-toBeUsed(A,path7) | wantsToGo(A,in2,out1) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
toBeUsed(A,path7) | -available(A,path7) | clockOrder(A) != in2 | -wantsToGo(A,in2,out1) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
-configuration(succ(A),B) | configuration(A,B) | toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
-configuration(succ(A),B) | -free(A,B) | toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
configuration(succ(A),B) | -configuration(A,B) | free(A,B) # label(setPath) # label(axiom).  [clausify(73)].
configuration(succ(A),B) | -toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
-open(succ(A),in2) | toBeUsed(A,path1) | toBeUsed(A,path3) | toBeUsed(A,path5) | toBeUsed(A,path7) # label(openGatein2) # label(axiom).  [clausify(74)].
open(succ(A),in2) | -toBeUsed(A,path1) # label(openGatein2) # label(axiom).  [clausify(74)].
open(succ(A),in2) | -toBeUsed(A,path3) # label(openGatein2) # label(axiom).  [clausify(74)].
open(succ(A),in2) | -toBeUsed(A,path5) # label(openGatein2) # label(axiom).  [clausify(74)].
open(succ(A),in2) | -toBeUsed(A,path7) # label(openGatein2) # label(axiom).  [clausify(74)].
-open(succ(A),in1) | toBeUsed(A,path0) | toBeUsed(A,path2) | toBeUsed(A,path4) | toBeUsed(A,path6) # label(openGatein1) # label(axiom).  [clausify(75)].
open(succ(A),in1) | -toBeUsed(A,path0) # label(openGatein1) # label(axiom).  [clausify(75)].
open(succ(A),in1) | -toBeUsed(A,path2) # label(openGatein1) # label(axiom).  [clausify(75)].
open(succ(A),in1) | -toBeUsed(A,path4) # label(openGatein1) # label(axiom).  [clausify(75)].
open(succ(A),in1) | -toBeUsed(A,path6) # label(openGatein1) # label(axiom).  [clausify(75)].
at(c1,c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
at(succ(c1),c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
switch(succ(c1),s4) != switch(c1,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating go/2
77 -train(A) | -go(B,A) | switch(B,s3) != out2 | -at(B,A,s3) | at(succ(B),A,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
78 go(A,B) # label(goIfItsPossible) # label(axiom).  [clausify(6)].
79 -train(A) | go(f3(B,A),A) # label(go) # label(axiom).  [clausify(9)].
Derived: -train(A) | switch(B,s3) != out2 | -at(B,A,s3) | at(succ(B),A,out2).  [resolve(77,b,78,a)].
80 -train(A) | -go(B,A) | switch(B,s4) != out2 | -at(B,A,s4) | at(succ(B),A,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
Derived: -train(A) | switch(B,s4) != out2 | -at(B,A,s4) | at(succ(B),A,out2).  [resolve(80,b,78,a)].
81 go(A,B) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
82 -train(A) | -go(B,A) | switch(B,s3) != out1 | -at(B,A,s3) | at(succ(B),A,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
Derived: -train(A) | switch(B,s3) != out1 | -at(B,A,s3) | at(succ(B),A,out1).  [resolve(82,b,78,a)].
83 -train(A) | -go(B,A) | switch(B,s4) != out1 | -at(B,A,s4) | at(succ(B),A,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
Derived: -train(A) | switch(B,s4) != out1 | -at(B,A,s4) | at(succ(B),A,out1).  [resolve(83,b,78,a)].
84 go(A,B) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
85 -train(A) | -go(B,A) | switch(B,s1) != s3 | -at(B,A,s1) | at(succ(B),A,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
Derived: -train(A) | switch(B,s1) != s3 | -at(B,A,s1) | at(succ(B),A,s3).  [resolve(85,b,78,a)].
86 -train(A) | -go(B,A) | switch(B,s2) != s3 | -at(B,A,s2) | at(succ(B),A,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
Derived: -train(A) | switch(B,s2) != s3 | -at(B,A,s2) | at(succ(B),A,s3).  [resolve(86,b,78,a)].
87 go(A,B) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
88 -train(A) | -go(B,A) | switch(B,s1) != s4 | -at(B,A,s1) | at(succ(B),A,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
Derived: -train(A) | switch(B,s1) != s4 | -at(B,A,s1) | at(succ(B),A,s4).  [resolve(88,b,78,a)].
89 -train(A) | -go(B,A) | switch(B,s2) != s4 | -at(B,A,s2) | at(succ(B),A,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
Derived: -train(A) | switch(B,s2) != s4 | -at(B,A,s2) | at(succ(B),A,s4).  [resolve(89,b,78,a)].
90 go(A,B) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
91 -train(A) | -go(B,A) | -open(B,in2) | -at(B,A,in2) | at(succ(B),A,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
Derived: -train(A) | -open(B,in2) | -at(B,A,in2) | at(succ(B),A,s2).  [resolve(91,b,78,a)].
92 go(A,B) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
93 -train(A) | -go(B,A) | -open(B,in1) | -at(B,A,in1) | at(succ(B),A,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
Derived: -train(A) | -open(B,in1) | -at(B,A,in1) | at(succ(B),A,s1).  [resolve(93,b,78,a)].
94 go(A,B) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
95 -at(succ(A),B,in2) | appear(A,B,in2) | -go(A,B) | -open(A,in2) # label(appearin2) # label(axiom).  [clausify(22)].
Derived: -at(succ(A),B,in2) | appear(A,B,in2) | -open(A,in2).  [resolve(95,c,78,a)].
96 at(succ(A),B,in2) | -at(A,B,in2) | go(A,B) # label(appearin2) # label(axiom).  [clausify(22)].
97 -at(succ(A),B,in1) | appear(A,B,in1) | -go(A,B) | -open(A,in1) # label(appearin1) # label(axiom).  [clausify(23)].
Derived: -at(succ(A),B,in1) | appear(A,B,in1) | -open(A,in1).  [resolve(97,c,78,a)].
98 at(succ(A),B,in1) | -at(A,B,in1) | go(A,B) # label(appearin1) # label(axiom).  [clausify(23)].

Eliminating train/1
99 train(A) | -at(succ(B),A,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
100 -train(A) | less(B,f3(B,A)) # label(go) # label(axiom).  [clausify(9)].
Derived: -at(succ(A),B,out2) | less(C,f3(C,B)).  [resolve(99,a,100,a)].
101 train(A) | -at(succ(B),A,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
Derived: -at(succ(A),B,out1) | less(C,f3(C,B)).  [resolve(101,a,100,a)].
102 train(A) | -at(succ(B),A,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
Derived: -at(succ(A),B,s3) | less(C,f3(C,B)).  [resolve(102,a,100,a)].
103 train(A) | -at(succ(B),A,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
Derived: -at(succ(A),B,s4) | less(C,f3(C,B)).  [resolve(103,a,100,a)].
104 train(A) | -at(succ(B),A,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
Derived: -at(succ(A),B,s2) | less(C,f3(C,B)).  [resolve(104,a,100,a)].
105 train(A) | -at(succ(B),A,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
Derived: -at(succ(A),B,s1) | less(C,f3(C,B)).  [resolve(105,a,100,a)].
106 -train(A) | switch(B,s3) != out2 | -at(B,A,s3) | at(succ(B),A,out2).  [resolve(77,b,78,a)].
Derived: switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,out2).  [resolve(106,a,99,a)].
Derived: switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,out1).  [resolve(106,a,101,a)].
Derived: switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s3).  [resolve(106,a,102,a)].
Derived: switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s4).  [resolve(106,a,103,a)].
Derived: switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s2).  [resolve(106,a,104,a)].
Derived: switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s1).  [resolve(106,a,105,a)].
107 -train(A) | switch(B,s4) != out2 | -at(B,A,s4) | at(succ(B),A,out2).  [resolve(80,b,78,a)].
Derived: switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,out2).  [resolve(107,a,99,a)].
Derived: switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,out1).  [resolve(107,a,101,a)].
Derived: switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s3).  [resolve(107,a,102,a)].
Derived: switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s4).  [resolve(107,a,103,a)].
Derived: switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s2).  [resolve(107,a,104,a)].
Derived: switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s1).  [resolve(107,a,105,a)].
108 -train(A) | switch(B,s3) != out1 | -at(B,A,s3) | at(succ(B),A,out1).  [resolve(82,b,78,a)].
Derived: switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,out2).  [resolve(108,a,99,a)].
Derived: switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,out1).  [resolve(108,a,101,a)].
Derived: switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s3).  [resolve(108,a,102,a)].
Derived: switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s4).  [resolve(108,a,103,a)].
Derived: switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s2).  [resolve(108,a,104,a)].
Derived: switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s1).  [resolve(108,a,105,a)].
109 -train(A) | switch(B,s4) != out1 | -at(B,A,s4) | at(succ(B),A,out1).  [resolve(83,b,78,a)].
Derived: switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,out2).  [resolve(109,a,99,a)].
Derived: switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,out1).  [resolve(109,a,101,a)].
Derived: switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s3).  [resolve(109,a,102,a)].
Derived: switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s4).  [resolve(109,a,103,a)].
Derived: switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s2).  [resolve(109,a,104,a)].
Derived: switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s1).  [resolve(109,a,105,a)].
110 -train(A) | switch(B,s1) != s3 | -at(B,A,s1) | at(succ(B),A,s3).  [resolve(85,b,78,a)].
Derived: switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,out2).  [resolve(110,a,99,a)].
Derived: switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,out1).  [resolve(110,a,101,a)].
Derived: switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s3).  [resolve(110,a,102,a)].
Derived: switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s4).  [resolve(110,a,103,a)].
Derived: switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s2).  [resolve(110,a,104,a)].
Derived: switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s1).  [resolve(110,a,105,a)].
111 -train(A) | switch(B,s2) != s3 | -at(B,A,s2) | at(succ(B),A,s3).  [resolve(86,b,78,a)].
Derived: switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,out2).  [resolve(111,a,99,a)].
Derived: switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,out1).  [resolve(111,a,101,a)].
Derived: switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s3).  [resolve(111,a,102,a)].
Derived: switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s4).  [resolve(111,a,103,a)].
Derived: switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s2).  [resolve(111,a,104,a)].
Derived: switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s1).  [resolve(111,a,105,a)].
112 -train(A) | switch(B,s1) != s4 | -at(B,A,s1) | at(succ(B),A,s4).  [resolve(88,b,78,a)].
Derived: switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,out2).  [resolve(112,a,99,a)].
Derived: switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,out1).  [resolve(112,a,101,a)].
Derived: switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s3).  [resolve(112,a,102,a)].
Derived: switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s4).  [resolve(112,a,103,a)].
Derived: switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s2).  [resolve(112,a,104,a)].
Derived: switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s1).  [resolve(112,a,105,a)].
113 -train(A) | switch(B,s2) != s4 | -at(B,A,s2) | at(succ(B),A,s4).  [resolve(89,b,78,a)].
Derived: switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,out2).  [resolve(113,a,99,a)].
Derived: switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,out1).  [resolve(113,a,101,a)].
Derived: switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s3).  [resolve(113,a,102,a)].
Derived: switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s4).  [resolve(113,a,103,a)].
Derived: switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s2).  [resolve(113,a,104,a)].
Derived: switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s1).  [resolve(113,a,105,a)].
114 -train(A) | -open(B,in2) | -at(B,A,in2) | at(succ(B),A,s2).  [resolve(91,b,78,a)].
Derived: -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,out2).  [resolve(114,a,99,a)].
Derived: -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,out1).  [resolve(114,a,101,a)].
Derived: -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s3).  [resolve(114,a,102,a)].
Derived: -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s4).  [resolve(114,a,103,a)].
Derived: -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s2).  [resolve(114,a,104,a)].
Derived: -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s1).  [resolve(114,a,105,a)].
115 -train(A) | -open(B,in1) | -at(B,A,in1) | at(succ(B),A,s1).  [resolve(93,b,78,a)].
Derived: -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,out2).  [resolve(115,a,99,a)].
Derived: -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,out1).  [resolve(115,a,101,a)].
Derived: -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s3).  [resolve(115,a,102,a)].
Derived: -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s4).  [resolve(115,a,103,a)].
Derived: -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s2).  [resolve(115,a,104,a)].
Derived: -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s1).  [resolve(115,a,105,a)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, free, nonconflicting, toBeUsed, configuration, available, open, less, at, wantsToGo, appear ]).
Function symbol precedence:  function_order([ s4, s3, out1, out2, in1, in2, s1, s2, path0, path1, path2, path3, path4, path5, path6, path7, c1, c2, switch, f3, succ, clockOrder, goal, pred, f1, f2, f4, f5, f6, f7 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      116 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
kept:      117 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
kept:      118 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
kept:      119 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
kept:      120 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
kept:      121 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      122 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      123 appear(A,f1(A),in2) # label(alwaysAppearsin2) # label(axiom).  [clausify(7)].
kept:      124 appear(A,f2(A),in1) # label(alwaysAppearsin1) # label(axiom).  [clausify(8)].
kept:      125 switch(A,s3) = out2 | switch(A,s4) = out2 | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
kept:      126 switch(A,s3) = out2 | at(A,B,s4) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
kept:      127 at(A,B,s3) | switch(A,s4) = out2 | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
kept:      128 at(A,B,s3) | at(A,B,s4) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
kept:      129 switch(A,s3) = out1 | switch(A,s4) = out1 | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
kept:      130 switch(A,s3) = out1 | at(A,B,s4) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
kept:      131 at(A,B,s3) | switch(A,s4) = out1 | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
kept:      132 at(A,B,s3) | at(A,B,s4) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
kept:      133 switch(A,s1) = s3 | switch(A,s2) = s3 | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
kept:      134 switch(A,s1) = s3 | at(A,B,s2) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
kept:      135 at(A,B,s1) | switch(A,s2) = s3 | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
kept:      136 at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
kept:      137 switch(A,s1) = s4 | switch(A,s2) = s4 | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
kept:      138 switch(A,s1) = s4 | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
kept:      139 at(A,B,s1) | switch(A,s2) = s4 | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
kept:      140 at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
kept:      141 open(A,in2) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
kept:      142 at(A,B,in2) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
kept:      143 open(A,in1) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
kept:      144 at(A,B,in1) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
           145 in1 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      146 in2 != in1.  [copy(145),flip(a)].
kept:      147 s2 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      148 s1 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
           149 out2 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      150 in2 != out2.  [copy(149),flip(a)].
           151 out1 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      152 in2 != out1.  [copy(151),flip(a)].
           153 s3 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      154 in2 != s3.  [copy(153),flip(a)].
           155 s4 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      156 in2 != s4.  [copy(155),flip(a)].
kept:      157 s2 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      158 s1 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
           159 out2 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      160 in1 != out2.  [copy(159),flip(a)].
           161 out1 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      162 in1 != out1.  [copy(161),flip(a)].
           163 s3 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      164 in1 != s3.  [copy(163),flip(a)].
           165 s4 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      166 in1 != s4.  [copy(165),flip(a)].
kept:      167 s2 != s1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      168 s2 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      169 s2 != out1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      170 s2 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      171 s2 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      172 s1 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      173 s1 != out1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      174 s1 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      175 s1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
           176 out1 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      177 out2 != out1.  [copy(176),flip(a)].
kept:      178 out2 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
           179 s4 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      180 out2 != s4.  [copy(179),flip(a)].
kept:      181 out1 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      182 out1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
           183 s4 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
kept:      184 s3 != s4.  [copy(183),flip(a)].
kept:      185 -at(A,B,out2) | -at(succ(A),B,out2) # label(disappearout2) # label(axiom).  [clausify(17)].
kept:      186 -at(A,B,out1) | -at(succ(A),B,out1) # label(disappearout1) # label(axiom).  [clausify(18)].
kept:      187 -at(A,B,C) | -at(A,B,D) | D = C # label(positionInOneNodeAtTime) # label(axiom).  [clausify(19)].
kept:      188 -at(A,B,in2) | C = B | -at(A,C,in2) # label(onlyOneTrainin2) # label(axiom).  [clausify(20)].
kept:      189 -at(A,B,in1) | C = B | -at(A,C,in1) # label(onlyOneTrainin1) # label(axiom).  [clausify(21)].
kept:      190 -at(succ(A),B,in2) | appear(A,B,in2) | at(A,B,in2) # label(appearin2) # label(axiom).  [clausify(22)].
kept:      191 at(succ(A),B,in2) | -appear(A,B,in2) # label(appearin2) # label(axiom).  [clausify(22)].
kept:      192 at(succ(A),B,in2) | -at(A,B,in2) | open(A,in2) # label(appearin2) # label(axiom).  [clausify(22)].
kept:      193 -at(succ(A),B,in1) | appear(A,B,in1) | at(A,B,in1) # label(appearin1) # label(axiom).  [clausify(23)].
kept:      194 at(succ(A),B,in1) | -appear(A,B,in1) # label(appearin1) # label(axiom).  [clausify(23)].
kept:      195 at(succ(A),B,in1) | -at(A,B,in1) | open(A,in1) # label(appearin1) # label(axiom).  [clausify(23)].
kept:      196 goal(A) = out2 | goal(A) = out1 # label(trainGoals) # label(axiom).  [clausify(24)].
kept:      197 succ(A) = A | clockOrder(A) != in2 | clockOrder(succ(A)) = in1 # label(clockOrderin2) # label(axiom).  [clausify(25)].
kept:      198 succ(A) = A | clockOrder(A) = in2 | clockOrder(succ(A)) != in1 # label(clockOrderin2) # label(axiom).  [clausify(25)].
kept:      199 succ(A) = A | clockOrder(A) != in1 | clockOrder(succ(A)) = in2 # label(clockOrderin1) # label(axiom).  [clausify(26)].
kept:      200 succ(A) = A | clockOrder(A) = in1 | clockOrder(succ(A)) != in2 # label(clockOrderin1) # label(axiom).  [clausify(26)].
kept:      201 clockOrder(A) = in2 | clockOrder(A) = in1 # label(clockPossibilities) # label(axiom).  [clausify(27)].
kept:      202 -configuration(A,path0) | switch(A,s3) = out2 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
kept:      203 -configuration(A,path0) | switch(A,s1) = s3 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
kept:      204 configuration(A,path0) | switch(A,s3) != out2 | switch(A,s1) != s3 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
kept:      205 -configuration(A,path1) | switch(A,s3) = out2 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
kept:      206 -configuration(A,path1) | switch(A,s2) = s3 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
kept:      207 configuration(A,path1) | switch(A,s3) != out2 | switch(A,s2) != s3 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
kept:      208 -configuration(A,path2) | switch(A,s4) = out2 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
kept:      209 -configuration(A,path2) | switch(A,s1) = s4 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
kept:      210 configuration(A,path2) | switch(A,s4) != out2 | switch(A,s1) != s4 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
kept:      211 -configuration(A,path3) | switch(A,s4) = out2 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
kept:      212 -configuration(A,path3) | switch(A,s2) = s4 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
kept:      213 configuration(A,path3) | switch(A,s4) != out2 | switch(A,s2) != s4 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
kept:      214 -configuration(A,path4) | switch(A,s3) = out1 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
kept:      215 -configuration(A,path4) | switch(A,s1) = s3 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
kept:      216 configuration(A,path4) | switch(A,s3) != out1 | switch(A,s1) != s3 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
kept:      217 -configuration(A,path5) | switch(A,s3) = out1 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
kept:      218 -configuration(A,path5) | switch(A,s2) = s3 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
kept:      219 configuration(A,path5) | switch(A,s3) != out1 | switch(A,s2) != s3 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
kept:      220 -configuration(A,path6) | switch(A,s4) = out1 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
kept:      221 -configuration(A,path6) | switch(A,s1) = s4 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
kept:      222 configuration(A,path6) | switch(A,s4) != out1 | switch(A,s1) != s4 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
kept:      223 -configuration(A,path7) | switch(A,s4) = out1 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
kept:      224 -configuration(A,path7) | switch(A,s2) = s4 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
kept:      225 configuration(A,path7) | switch(A,s4) != out1 | switch(A,s2) != s4 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
kept:      226 -free(A,path0) | -at(A,B,s3) # label(freeRoute0) # label(axiom).  [clausify(36)].
kept:      227 -free(A,path0) | -at(A,B,s1) # label(freeRoute0) # label(axiom).  [clausify(36)].
kept:      228 free(A,path0) | at(A,B,s3) | at(A,B,s1) # label(freeRoute0) # label(axiom).  [clausify(36)].
kept:      229 -free(A,path1) | -at(A,B,s3) # label(freeRoute1) # label(axiom).  [clausify(37)].
kept:      230 -free(A,path1) | -at(A,B,s2) # label(freeRoute1) # label(axiom).  [clausify(37)].
kept:      231 free(A,path1) | at(A,B,s3) | at(A,B,s2) # label(freeRoute1) # label(axiom).  [clausify(37)].
kept:      232 -free(A,path2) | -at(A,B,s4) # label(freeRoute2) # label(axiom).  [clausify(38)].
kept:      233 -free(A,path2) | -at(A,B,s1) # label(freeRoute2) # label(axiom).  [clausify(38)].
kept:      234 free(A,path2) | at(A,B,s4) | at(A,B,s1) # label(freeRoute2) # label(axiom).  [clausify(38)].
kept:      235 -free(A,path3) | -at(A,B,s4) # label(freeRoute3) # label(axiom).  [clausify(39)].
kept:      236 -free(A,path3) | -at(A,B,s2) # label(freeRoute3) # label(axiom).  [clausify(39)].
kept:      237 free(A,path3) | at(A,B,s4) | at(A,B,s2) # label(freeRoute3) # label(axiom).  [clausify(39)].
kept:      238 -free(A,path4) | -at(A,B,s3) # label(freeRoute4) # label(axiom).  [clausify(40)].
kept:      239 -free(A,path4) | -at(A,B,s1) # label(freeRoute4) # label(axiom).  [clausify(40)].
kept:      240 free(A,path4) | at(A,B,s3) | at(A,B,s1) # label(freeRoute4) # label(axiom).  [clausify(40)].
kept:      241 -free(A,path5) | -at(A,B,s3) # label(freeRoute5) # label(axiom).  [clausify(41)].
kept:      242 -free(A,path5) | -at(A,B,s2) # label(freeRoute5) # label(axiom).  [clausify(41)].
kept:      243 free(A,path5) | at(A,B,s3) | at(A,B,s2) # label(freeRoute5) # label(axiom).  [clausify(41)].
kept:      244 -free(A,path6) | -at(A,B,s4) # label(freeRoute6) # label(axiom).  [clausify(42)].
kept:      245 -free(A,path6) | -at(A,B,s1) # label(freeRoute6) # label(axiom).  [clausify(42)].
kept:      246 free(A,path6) | at(A,B,s4) | at(A,B,s1) # label(freeRoute6) # label(axiom).  [clausify(42)].
kept:      247 -free(A,path7) | -at(A,B,s4) # label(freeRoute7) # label(axiom).  [clausify(43)].
kept:      248 -free(A,path7) | -at(A,B,s2) # label(freeRoute7) # label(axiom).  [clausify(43)].
kept:      249 free(A,path7) | at(A,B,s4) | at(A,B,s2) # label(freeRoute7) # label(axiom).  [clausify(43)].
kept:      250 -nonconflicting(A,path0) | free(A,path0) # label(nonconflicting0) # label(axiom).  [clausify(44)].
kept:      251 -nonconflicting(A,path0) | free(A,path1) # label(nonconflicting0) # label(axiom).  [clausify(44)].
kept:      252 -nonconflicting(A,path0) | free(A,path2) # label(nonconflicting0) # label(axiom).  [clausify(44)].
kept:      253 -nonconflicting(A,path0) | free(A,path3) # label(nonconflicting0) # label(axiom).  [clausify(44)].
kept:      254 -nonconflicting(A,path0) | free(A,path4) # label(nonconflicting0) # label(axiom).  [clausify(44)].
kept:      255 -nonconflicting(A,path0) | free(A,path5) # label(nonconflicting0) # label(axiom).  [clausify(44)].
kept:      256 -nonconflicting(A,path0) | free(A,path6) # label(nonconflicting0) # label(axiom).  [clausify(44)].
kept:      257 nonconflicting(A,path0) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path6) # label(nonconflicting0) # label(axiom).  [clausify(44)].
kept:      258 -nonconflicting(A,path1) | free(A,path1) # label(nonconflicting1) # label(axiom).  [clausify(45)].
kept:      259 -nonconflicting(A,path1) | free(A,path0) # label(nonconflicting1) # label(axiom).  [clausify(45)].
kept:      260 -nonconflicting(A,path1) | free(A,path2) # label(nonconflicting1) # label(axiom).  [clausify(45)].
kept:      261 -nonconflicting(A,path1) | free(A,path3) # label(nonconflicting1) # label(axiom).  [clausify(45)].
kept:      262 -nonconflicting(A,path1) | free(A,path4) # label(nonconflicting1) # label(axiom).  [clausify(45)].
kept:      263 -nonconflicting(A,path1) | free(A,path5) # label(nonconflicting1) # label(axiom).  [clausify(45)].
kept:      264 -nonconflicting(A,path1) | free(A,path7) # label(nonconflicting1) # label(axiom).  [clausify(45)].
kept:      265 nonconflicting(A,path1) | -free(A,path1) | -free(A,path0) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path7) # label(nonconflicting1) # label(axiom).  [clausify(45)].
kept:      266 -nonconflicting(A,path2) | free(A,path2) # label(nonconflicting2) # label(axiom).  [clausify(46)].
kept:      267 -nonconflicting(A,path2) | free(A,path0) # label(nonconflicting2) # label(axiom).  [clausify(46)].
kept:      268 -nonconflicting(A,path2) | free(A,path1) # label(nonconflicting2) # label(axiom).  [clausify(46)].
kept:      269 -nonconflicting(A,path2) | free(A,path3) # label(nonconflicting2) # label(axiom).  [clausify(46)].
kept:      270 -nonconflicting(A,path2) | free(A,path4) # label(nonconflicting2) # label(axiom).  [clausify(46)].
kept:      271 -nonconflicting(A,path2) | free(A,path6) # label(nonconflicting2) # label(axiom).  [clausify(46)].
kept:      272 -nonconflicting(A,path2) | free(A,path7) # label(nonconflicting2) # label(axiom).  [clausify(46)].
kept:      273 nonconflicting(A,path2) | -free(A,path2) | -free(A,path0) | -free(A,path1) | -free(A,path3) | -free(A,path4) | -free(A,path6) | -free(A,path7) # label(nonconflicting2) # label(axiom).  [clausify(46)].
kept:      274 -nonconflicting(A,path3) | free(A,path3) # label(nonconflicting3) # label(axiom).  [clausify(47)].
kept:      275 -nonconflicting(A,path3) | free(A,path0) # label(nonconflicting3) # label(axiom).  [clausify(47)].
kept:      276 -nonconflicting(A,path3) | free(A,path1) # label(nonconflicting3) # label(axiom).  [clausify(47)].
kept:      277 -nonconflicting(A,path3) | free(A,path2) # label(nonconflicting3) # label(axiom).  [clausify(47)].
kept:      278 -nonconflicting(A,path3) | free(A,path5) # label(nonconflicting3) # label(axiom).  [clausify(47)].
kept:      279 -nonconflicting(A,path3) | free(A,path6) # label(nonconflicting3) # label(axiom).  [clausify(47)].
kept:      280 -nonconflicting(A,path3) | free(A,path7) # label(nonconflicting3) # label(axiom).  [clausify(47)].
kept:      281 nonconflicting(A,path3) | -free(A,path3) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path5) | -free(A,path6) | -free(A,path7) # label(nonconflicting3) # label(axiom).  [clausify(47)].
kept:      282 -nonconflicting(A,path4) | free(A,path4) # label(nonconflicting4) # label(axiom).  [clausify(48)].
kept:      283 -nonconflicting(A,path4) | free(A,path0) # label(nonconflicting4) # label(axiom).  [clausify(48)].
kept:      284 -nonconflicting(A,path4) | free(A,path1) # label(nonconflicting4) # label(axiom).  [clausify(48)].
kept:      285 -nonconflicting(A,path4) | free(A,path2) # label(nonconflicting4) # label(axiom).  [clausify(48)].
kept:      286 -nonconflicting(A,path4) | free(A,path5) # label(nonconflicting4) # label(axiom).  [clausify(48)].
kept:      287 -nonconflicting(A,path4) | free(A,path6) # label(nonconflicting4) # label(axiom).  [clausify(48)].
kept:      288 -nonconflicting(A,path4) | free(A,path7) # label(nonconflicting4) # label(axiom).  [clausify(48)].
kept:      289 nonconflicting(A,path4) | -free(A,path4) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path5) | -free(A,path6) | -free(A,path7) # label(nonconflicting4) # label(axiom).  [clausify(48)].
kept:      290 -nonconflicting(A,path5) | free(A,path5) # label(nonconflicting5) # label(axiom).  [clausify(49)].
kept:      291 -nonconflicting(A,path5) | free(A,path0) # label(nonconflicting5) # label(axiom).  [clausify(49)].
kept:      292 -nonconflicting(A,path5) | free(A,path1) # label(nonconflicting5) # label(axiom).  [clausify(49)].
kept:      293 -nonconflicting(A,path5) | free(A,path3) # label(nonconflicting5) # label(axiom).  [clausify(49)].
kept:      294 -nonconflicting(A,path5) | free(A,path4) # label(nonconflicting5) # label(axiom).  [clausify(49)].
kept:      295 -nonconflicting(A,path5) | free(A,path6) # label(nonconflicting5) # label(axiom).  [clausify(49)].
kept:      296 -nonconflicting(A,path5) | free(A,path7) # label(nonconflicting5) # label(axiom).  [clausify(49)].
kept:      297 nonconflicting(A,path5) | -free(A,path5) | -free(A,path0) | -free(A,path1) | -free(A,path3) | -free(A,path4) | -free(A,path6) | -free(A,path7) # label(nonconflicting5) # label(axiom).  [clausify(49)].
kept:      298 -nonconflicting(A,path6) | free(A,path6) # label(nonconflicting6) # label(axiom).  [clausify(50)].
kept:      299 -nonconflicting(A,path6) | free(A,path0) # label(nonconflicting6) # label(axiom).  [clausify(50)].
kept:      300 -nonconflicting(A,path6) | free(A,path2) # label(nonconflicting6) # label(axiom).  [clausify(50)].
kept:      301 -nonconflicting(A,path6) | free(A,path3) # label(nonconflicting6) # label(axiom).  [clausify(50)].
kept:      302 -nonconflicting(A,path6) | free(A,path4) # label(nonconflicting6) # label(axiom).  [clausify(50)].
kept:      303 -nonconflicting(A,path6) | free(A,path5) # label(nonconflicting6) # label(axiom).  [clausify(50)].
kept:      304 -nonconflicting(A,path6) | free(A,path7) # label(nonconflicting6) # label(axiom).  [clausify(50)].
kept:      305 nonconflicting(A,path6) | -free(A,path6) | -free(A,path0) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path7) # label(nonconflicting6) # label(axiom).  [clausify(50)].
kept:      306 -nonconflicting(A,path7) | free(A,path7) # label(nonconflicting7) # label(axiom).  [clausify(51)].
kept:      307 -nonconflicting(A,path7) | free(A,path1) # label(nonconflicting7) # label(axiom).  [clausify(51)].
kept:      308 -nonconflicting(A,path7) | free(A,path2) # label(nonconflicting7) # label(axiom).  [clausify(51)].
kept:      309 -nonconflicting(A,path7) | free(A,path3) # label(nonconflicting7) # label(axiom).  [clausify(51)].
kept:      310 -nonconflicting(A,path7) | free(A,path4) # label(nonconflicting7) # label(axiom).  [clausify(51)].
kept:      311 -nonconflicting(A,path7) | free(A,path5) # label(nonconflicting7) # label(axiom).  [clausify(51)].
kept:      312 -nonconflicting(A,path7) | free(A,path6) # label(nonconflicting7) # label(axiom).  [clausify(51)].
kept:      313 nonconflicting(A,path7) | -free(A,path7) | -free(A,path1) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path6) # label(nonconflicting7) # label(axiom).  [clausify(51)].
kept:      314 path1 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      315 path2 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      316 path3 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      317 path4 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      318 path5 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      319 path6 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      320 path7 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      321 path2 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      322 path3 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      323 path4 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      324 path5 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      325 path6 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      326 path7 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      327 path3 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      328 path4 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      329 path5 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      330 path6 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      331 path7 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      332 path4 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      333 path5 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      334 path6 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      335 path7 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      336 path5 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      337 path6 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      338 path7 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      339 path6 != path5 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      340 path7 != path5 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      341 path7 != path6 # label(routesExclusivity) # label(axiom).  [clausify(52)].
kept:      342 -available(A,path0) | nonconflicting(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
kept:      343 -available(A,path0) | configuration(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
kept:      344 available(A,path0) | -nonconflicting(A,path0) | -configuration(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
kept:      345 -available(A,path1) | nonconflicting(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
kept:      346 -available(A,path1) | configuration(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
kept:      347 available(A,path1) | -nonconflicting(A,path1) | -configuration(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
kept:      348 -available(A,path2) | nonconflicting(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
kept:      349 -available(A,path2) | configuration(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
kept:      350 available(A,path2) | -nonconflicting(A,path2) | -configuration(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
kept:      351 -available(A,path3) | nonconflicting(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
kept:      352 -available(A,path3) | configuration(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
kept:      353 available(A,path3) | -nonconflicting(A,path3) | -configuration(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
kept:      354 -available(A,path4) | nonconflicting(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
kept:      355 -available(A,path4) | configuration(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
kept:      356 available(A,path4) | -nonconflicting(A,path4) | -configuration(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
kept:      357 -available(A,path5) | nonconflicting(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
kept:      358 -available(A,path5) | configuration(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
kept:      359 available(A,path5) | -nonconflicting(A,path5) | -configuration(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
kept:      360 -available(A,path6) | nonconflicting(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
kept:      361 -available(A,path6) | configuration(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
kept:      362 available(A,path6) | -nonconflicting(A,path6) | -configuration(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
kept:      363 -available(A,path7) | nonconflicting(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
kept:      364 -available(A,path7) | configuration(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
kept:      365 available(A,path7) | -nonconflicting(A,path7) | -configuration(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
kept:      366 -wantsToGo(A,in2,out2) | at(A,f4(A),in2) # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
kept:      367 -wantsToGo(A,in2,out2) | goal(f4(A)) = out2 # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
kept:      368 wantsToGo(A,in2,out2) | -at(A,f4(A),in2) | goal(f4(A)) != out2 # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
kept:      369 -wantsToGo(A,in2,out1) | at(A,f5(A),in2) # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
kept:      370 -wantsToGo(A,in2,out1) | goal(f5(A)) = out1 # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
kept:      371 wantsToGo(A,in2,out1) | -at(A,f5(A),in2) | goal(f5(A)) != out1 # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
kept:      372 -wantsToGo(A,in1,out2) | at(A,f6(A),in1) # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
kept:      373 -wantsToGo(A,in1,out2) | goal(f6(A)) = out2 # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
kept:      374 wantsToGo(A,in1,out2) | -at(A,f6(A),in1) | goal(f6(A)) != out2 # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
kept:      375 -wantsToGo(A,in1,out1) | at(A,f7(A),in1) # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
kept:      376 -wantsToGo(A,in1,out1) | goal(f7(A)) = out1 # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
kept:      377 wantsToGo(A,in1,out1) | -at(A,f7(A),in1) | goal(f7(A)) != out1 # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
kept:      378 -toBeUsed(A,path0) | available(A,path0) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
kept:      379 -toBeUsed(A,path0) | clockOrder(A) = in1 # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
kept:      380 -toBeUsed(A,path0) | wantsToGo(A,in1,out2) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
kept:      381 toBeUsed(A,path0) | -available(A,path0) | clockOrder(A) != in1 | -wantsToGo(A,in1,out2) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
kept:      382 -toBeUsed(A,path1) | available(A,path1) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
kept:      383 -toBeUsed(A,path1) | clockOrder(A) = in2 # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
kept:      384 -toBeUsed(A,path1) | wantsToGo(A,in2,out2) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
kept:      385 toBeUsed(A,path1) | -available(A,path1) | clockOrder(A) != in2 | -wantsToGo(A,in2,out2) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
kept:      386 -toBeUsed(A,path2) | available(A,path2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
kept:      387 -toBeUsed(A,path2) | clockOrder(A) = in1 # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
kept:      388 -toBeUsed(A,path2) | wantsToGo(A,in1,out2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
kept:      389 toBeUsed(A,path2) | -available(A,path2) | clockOrder(A) != in1 | -wantsToGo(A,in1,out2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
kept:      390 -toBeUsed(A,path3) | available(A,path3) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
kept:      391 -toBeUsed(A,path3) | clockOrder(A) = in2 # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
kept:      392 -toBeUsed(A,path3) | wantsToGo(A,in2,out2) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
kept:      393 toBeUsed(A,path3) | -available(A,path3) | clockOrder(A) != in2 | -wantsToGo(A,in2,out2) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
kept:      394 -toBeUsed(A,path4) | available(A,path4) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
kept:      395 -toBeUsed(A,path4) | clockOrder(A) = in1 # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
kept:      396 -toBeUsed(A,path4) | wantsToGo(A,in1,out1) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
kept:      397 toBeUsed(A,path4) | -available(A,path4) | clockOrder(A) != in1 | -wantsToGo(A,in1,out1) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
kept:      398 -toBeUsed(A,path5) | available(A,path5) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
kept:      399 -toBeUsed(A,path5) | clockOrder(A) = in2 # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
kept:      400 -toBeUsed(A,path5) | wantsToGo(A,in2,out1) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
kept:      401 toBeUsed(A,path5) | -available(A,path5) | clockOrder(A) != in2 | -wantsToGo(A,in2,out1) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
kept:      402 -toBeUsed(A,path6) | available(A,path6) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
kept:      403 -toBeUsed(A,path6) | clockOrder(A) = in1 # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
kept:      404 -toBeUsed(A,path6) | wantsToGo(A,in1,out1) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
kept:      405 toBeUsed(A,path6) | -available(A,path6) | clockOrder(A) != in1 | -wantsToGo(A,in1,out1) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
kept:      406 -toBeUsed(A,path7) | available(A,path7) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
kept:      407 -toBeUsed(A,path7) | clockOrder(A) = in2 # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
kept:      408 -toBeUsed(A,path7) | wantsToGo(A,in2,out1) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
kept:      409 toBeUsed(A,path7) | -available(A,path7) | clockOrder(A) != in2 | -wantsToGo(A,in2,out1) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
kept:      410 -configuration(succ(A),B) | configuration(A,B) | toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
kept:      411 -configuration(succ(A),B) | -free(A,B) | toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
kept:      412 configuration(succ(A),B) | -configuration(A,B) | free(A,B) # label(setPath) # label(axiom).  [clausify(73)].
kept:      413 configuration(succ(A),B) | -toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
kept:      414 -open(succ(A),in2) | toBeUsed(A,path1) | toBeUsed(A,path3) | toBeUsed(A,path5) | toBeUsed(A,path7) # label(openGatein2) # label(axiom).  [clausify(74)].
kept:      415 open(succ(A),in2) | -toBeUsed(A,path1) # label(openGatein2) # label(axiom).  [clausify(74)].
kept:      416 open(succ(A),in2) | -toBeUsed(A,path3) # label(openGatein2) # label(axiom).  [clausify(74)].
kept:      417 open(succ(A),in2) | -toBeUsed(A,path5) # label(openGatein2) # label(axiom).  [clausify(74)].
kept:      418 open(succ(A),in2) | -toBeUsed(A,path7) # label(openGatein2) # label(axiom).  [clausify(74)].
kept:      419 -open(succ(A),in1) | toBeUsed(A,path0) | toBeUsed(A,path2) | toBeUsed(A,path4) | toBeUsed(A,path6) # label(openGatein1) # label(axiom).  [clausify(75)].
kept:      420 open(succ(A),in1) | -toBeUsed(A,path0) # label(openGatein1) # label(axiom).  [clausify(75)].
kept:      421 open(succ(A),in1) | -toBeUsed(A,path2) # label(openGatein1) # label(axiom).  [clausify(75)].
kept:      422 open(succ(A),in1) | -toBeUsed(A,path4) # label(openGatein1) # label(axiom).  [clausify(75)].
kept:      423 open(succ(A),in1) | -toBeUsed(A,path6) # label(openGatein1) # label(axiom).  [clausify(75)].
kept:      424 at(c1,c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
kept:      425 at(succ(c1),c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
kept:      426 switch(succ(c1),s4) != switch(c1,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
kept:      427 -at(succ(A),B,in2) | appear(A,B,in2) | -open(A,in2).  [resolve(95,c,78,a)].
kept:      428 -at(succ(A),B,in1) | appear(A,B,in1) | -open(A,in1).  [resolve(97,c,78,a)].
kept:      429 -at(succ(A),B,out2) | less(C,f3(C,B)).  [resolve(99,a,100,a)].
kept:      430 -at(succ(A),B,out1) | less(C,f3(C,B)).  [resolve(101,a,100,a)].
kept:      431 -at(succ(A),B,s3) | less(C,f3(C,B)).  [resolve(102,a,100,a)].
kept:      432 -at(succ(A),B,s4) | less(C,f3(C,B)).  [resolve(103,a,100,a)].
kept:      433 -at(succ(A),B,s2) | less(C,f3(C,B)).  [resolve(104,a,100,a)].
kept:      434 -at(succ(A),B,s1) | less(C,f3(C,B)).  [resolve(105,a,100,a)].
kept:      435 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,out2).  [resolve(106,a,99,a)].
kept:      436 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,out1).  [resolve(106,a,101,a)].
kept:      437 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s3).  [resolve(106,a,102,a)].
kept:      438 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s4).  [resolve(106,a,103,a)].
kept:      439 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s2).  [resolve(106,a,104,a)].
kept:      440 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s1).  [resolve(106,a,105,a)].
kept:      441 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,out2).  [resolve(107,a,99,a)].
kept:      442 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,out1).  [resolve(107,a,101,a)].
kept:      443 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s3).  [resolve(107,a,102,a)].
kept:      444 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s4).  [resolve(107,a,103,a)].
kept:      445 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s2).  [resolve(107,a,104,a)].
kept:      446 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s1).  [resolve(107,a,105,a)].
kept:      447 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,out2).  [resolve(108,a,99,a)].
kept:      448 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,out1).  [resolve(108,a,101,a)].
kept:      449 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s3).  [resolve(108,a,102,a)].
kept:      450 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s4).  [resolve(108,a,103,a)].
kept:      451 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s2).  [resolve(108,a,104,a)].
kept:      452 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s1).  [resolve(108,a,105,a)].
kept:      453 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,out2).  [resolve(109,a,99,a)].
kept:      454 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,out1).  [resolve(109,a,101,a)].
kept:      455 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s3).  [resolve(109,a,102,a)].
kept:      456 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s4).  [resolve(109,a,103,a)].
kept:      457 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s2).  [resolve(109,a,104,a)].
kept:      458 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s1).  [resolve(109,a,105,a)].
kept:      459 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,out2).  [resolve(110,a,99,a)].
kept:      460 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,out1).  [resolve(110,a,101,a)].
kept:      461 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s3).  [resolve(110,a,102,a)].
kept:      462 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s4).  [resolve(110,a,103,a)].
kept:      463 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s2).  [resolve(110,a,104,a)].
kept:      464 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s1).  [resolve(110,a,105,a)].
kept:      465 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,out2).  [resolve(111,a,99,a)].
kept:      466 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,out1).  [resolve(111,a,101,a)].
kept:      467 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s3).  [resolve(111,a,102,a)].
kept:      468 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s4).  [resolve(111,a,103,a)].
kept:      469 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s2).  [resolve(111,a,104,a)].
kept:      470 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s1).  [resolve(111,a,105,a)].
kept:      471 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,out2).  [resolve(112,a,99,a)].
kept:      472 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,out1).  [resolve(112,a,101,a)].
kept:      473 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s3).  [resolve(112,a,102,a)].
kept:      474 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s4).  [resolve(112,a,103,a)].
kept:      475 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s2).  [resolve(112,a,104,a)].
kept:      476 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s1).  [resolve(112,a,105,a)].
kept:      477 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,out2).  [resolve(113,a,99,a)].
kept:      478 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,out1).  [resolve(113,a,101,a)].
kept:      479 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s3).  [resolve(113,a,102,a)].
kept:      480 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s4).  [resolve(113,a,103,a)].
kept:      481 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s2).  [resolve(113,a,104,a)].
kept:      482 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s1).  [resolve(113,a,105,a)].
kept:      483 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,out2).  [resolve(114,a,99,a)].
kept:      484 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,out1).  [resolve(114,a,101,a)].
kept:      485 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s3).  [resolve(114,a,102,a)].
kept:      486 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s4).  [resolve(114,a,103,a)].
kept:      487 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s2).  [resolve(114,a,104,a)].
kept:      488 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s1).  [resolve(114,a,105,a)].
kept:      489 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,out2).  [resolve(115,a,99,a)].
kept:      490 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,out1).  [resolve(115,a,101,a)].
kept:      491 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s3).  [resolve(115,a,102,a)].
kept:      492 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s4).  [resolve(115,a,103,a)].
kept:      493 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s2).  [resolve(115,a,104,a)].
kept:      494 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s1).  [resolve(115,a,105,a)].
kept:      495 less(A,A).  [factor(118,a,b)].
kept:      496 switch(succ(A),s3) != out2 | -at(succ(A),B,s3) | at(succ(succ(A)),B,out2).  [factor(437,b,d)].
kept:      497 switch(succ(A),s4) != out2 | -at(succ(A),B,s4) | at(succ(succ(A)),B,out2).  [factor(444,b,d)].
kept:      498 switch(succ(A),s3) != out1 | -at(succ(A),B,s3) | at(succ(succ(A)),B,out1).  [factor(449,b,d)].
kept:      499 switch(succ(A),s4) != out1 | -at(succ(A),B,s4) | at(succ(succ(A)),B,out1).  [factor(456,b,d)].
kept:      500 switch(succ(A),s1) != s3 | -at(succ(A),B,s1) | at(succ(succ(A)),B,s3).  [factor(464,b,d)].
kept:      501 switch(succ(A),s2) != s3 | -at(succ(A),B,s2) | at(succ(succ(A)),B,s3).  [factor(469,b,d)].
kept:      502 switch(succ(A),s1) != s4 | -at(succ(A),B,s1) | at(succ(succ(A)),B,s4).  [factor(476,b,d)].
kept:      503 switch(succ(A),s2) != s4 | -at(succ(A),B,s2) | at(succ(succ(A)),B,s4).  [factor(481,b,d)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
116 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
117 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
118 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
119 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
120 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
121 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
122 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
123 appear(A,f1(A),in2) # label(alwaysAppearsin2) # label(axiom).  [clausify(7)].
124 appear(A,f2(A),in1) # label(alwaysAppearsin1) # label(axiom).  [clausify(8)].
125 switch(A,s3) = out2 | switch(A,s4) = out2 | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
126 switch(A,s3) = out2 | at(A,B,s4) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
127 at(A,B,s3) | switch(A,s4) = out2 | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
128 at(A,B,s3) | at(A,B,s4) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].
129 switch(A,s3) = out1 | switch(A,s4) = out1 | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
130 switch(A,s3) = out1 | at(A,B,s4) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
131 at(A,B,s3) | switch(A,s4) = out1 | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
132 at(A,B,s3) | at(A,B,s4) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].
133 switch(A,s1) = s3 | switch(A,s2) = s3 | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
134 switch(A,s1) = s3 | at(A,B,s2) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
135 at(A,B,s1) | switch(A,s2) = s3 | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
136 at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].
137 switch(A,s1) = s4 | switch(A,s2) = s4 | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
138 switch(A,s1) = s4 | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
139 at(A,B,s1) | switch(A,s2) = s4 | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
140 at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
141 open(A,in2) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
142 at(A,B,in2) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].
143 open(A,in1) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
144 at(A,B,in1) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].
146 in2 != in1.  [copy(145),flip(a)].
147 s2 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
148 s1 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
150 in2 != out2.  [copy(149),flip(a)].
152 in2 != out1.  [copy(151),flip(a)].
154 in2 != s3.  [copy(153),flip(a)].
156 in2 != s4.  [copy(155),flip(a)].
157 s2 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
158 s1 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
160 in1 != out2.  [copy(159),flip(a)].
162 in1 != out1.  [copy(161),flip(a)].
164 in1 != s3.  [copy(163),flip(a)].
166 in1 != s4.  [copy(165),flip(a)].
167 s2 != s1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
168 s2 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
169 s2 != out1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
170 s2 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
171 s2 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
172 s1 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
173 s1 != out1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
174 s1 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
175 s1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
177 out2 != out1.  [copy(176),flip(a)].
178 out2 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
180 out2 != s4.  [copy(179),flip(a)].
181 out1 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
182 out1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
184 s3 != s4.  [copy(183),flip(a)].
185 -at(A,B,out2) | -at(succ(A),B,out2) # label(disappearout2) # label(axiom).  [clausify(17)].
186 -at(A,B,out1) | -at(succ(A),B,out1) # label(disappearout1) # label(axiom).  [clausify(18)].
187 -at(A,B,C) | -at(A,B,D) | D = C # label(positionInOneNodeAtTime) # label(axiom).  [clausify(19)].
188 -at(A,B,in2) | C = B | -at(A,C,in2) # label(onlyOneTrainin2) # label(axiom).  [clausify(20)].
189 -at(A,B,in1) | C = B | -at(A,C,in1) # label(onlyOneTrainin1) # label(axiom).  [clausify(21)].
190 -at(succ(A),B,in2) | appear(A,B,in2) | at(A,B,in2) # label(appearin2) # label(axiom).  [clausify(22)].
191 at(succ(A),B,in2) | -appear(A,B,in2) # label(appearin2) # label(axiom).  [clausify(22)].
192 at(succ(A),B,in2) | -at(A,B,in2) | open(A,in2) # label(appearin2) # label(axiom).  [clausify(22)].
193 -at(succ(A),B,in1) | appear(A,B,in1) | at(A,B,in1) # label(appearin1) # label(axiom).  [clausify(23)].
194 at(succ(A),B,in1) | -appear(A,B,in1) # label(appearin1) # label(axiom).  [clausify(23)].
195 at(succ(A),B,in1) | -at(A,B,in1) | open(A,in1) # label(appearin1) # label(axiom).  [clausify(23)].
196 goal(A) = out2 | goal(A) = out1 # label(trainGoals) # label(axiom).  [clausify(24)].
197 succ(A) = A | clockOrder(A) != in2 | clockOrder(succ(A)) = in1 # label(clockOrderin2) # label(axiom).  [clausify(25)].
198 succ(A) = A | clockOrder(A) = in2 | clockOrder(succ(A)) != in1 # label(clockOrderin2) # label(axiom).  [clausify(25)].
199 succ(A) = A | clockOrder(A) != in1 | clockOrder(succ(A)) = in2 # label(clockOrderin1) # label(axiom).  [clausify(26)].
200 succ(A) = A | clockOrder(A) = in1 | clockOrder(succ(A)) != in2 # label(clockOrderin1) # label(axiom).  [clausify(26)].
201 clockOrder(A) = in2 | clockOrder(A) = in1 # label(clockPossibilities) # label(axiom).  [clausify(27)].
202 -configuration(A,path0) | switch(A,s3) = out2 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
203 -configuration(A,path0) | switch(A,s1) = s3 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
204 configuration(A,path0) | switch(A,s3) != out2 | switch(A,s1) != s3 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].
205 -configuration(A,path1) | switch(A,s3) = out2 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
206 -configuration(A,path1) | switch(A,s2) = s3 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
207 configuration(A,path1) | switch(A,s3) != out2 | switch(A,s2) != s3 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].
208 -configuration(A,path2) | switch(A,s4) = out2 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
209 -configuration(A,path2) | switch(A,s1) = s4 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
210 configuration(A,path2) | switch(A,s4) != out2 | switch(A,s1) != s4 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].
211 -configuration(A,path3) | switch(A,s4) = out2 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
212 -configuration(A,path3) | switch(A,s2) = s4 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
213 configuration(A,path3) | switch(A,s4) != out2 | switch(A,s2) != s4 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].
214 -configuration(A,path4) | switch(A,s3) = out1 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
215 -configuration(A,path4) | switch(A,s1) = s3 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
216 configuration(A,path4) | switch(A,s3) != out1 | switch(A,s1) != s3 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].
217 -configuration(A,path5) | switch(A,s3) = out1 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
218 -configuration(A,path5) | switch(A,s2) = s3 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
219 configuration(A,path5) | switch(A,s3) != out1 | switch(A,s2) != s3 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].
220 -configuration(A,path6) | switch(A,s4) = out1 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
221 -configuration(A,path6) | switch(A,s1) = s4 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
222 configuration(A,path6) | switch(A,s4) != out1 | switch(A,s1) != s4 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].
223 -configuration(A,path7) | switch(A,s4) = out1 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
224 -configuration(A,path7) | switch(A,s2) = s4 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
225 configuration(A,path7) | switch(A,s4) != out1 | switch(A,s2) != s4 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].
226 -free(A,path0) | -at(A,B,s3) # label(freeRoute0) # label(axiom).  [clausify(36)].
227 -free(A,path0) | -at(A,B,s1) # label(freeRoute0) # label(axiom).  [clausify(36)].
228 free(A,path0) | at(A,B,s3) | at(A,B,s1) # label(freeRoute0) # label(axiom).  [clausify(36)].
229 -free(A,path1) | -at(A,B,s3) # label(freeRoute1) # label(axiom).  [clausify(37)].
230 -free(A,path1) | -at(A,B,s2) # label(freeRoute1) # label(axiom).  [clausify(37)].
231 free(A,path1) | at(A,B,s3) | at(A,B,s2) # label(freeRoute1) # label(axiom).  [clausify(37)].
232 -free(A,path2) | -at(A,B,s4) # label(freeRoute2) # label(axiom).  [clausify(38)].
233 -free(A,path2) | -at(A,B,s1) # label(freeRoute2) # label(axiom).  [clausify(38)].
234 free(A,path2) | at(A,B,s4) | at(A,B,s1) # label(freeRoute2) # label(axiom).  [clausify(38)].
235 -free(A,path3) | -at(A,B,s4) # label(freeRoute3) # label(axiom).  [clausify(39)].
236 -free(A,path3) | -at(A,B,s2) # label(freeRoute3) # label(axiom).  [clausify(39)].
237 free(A,path3) | at(A,B,s4) | at(A,B,s2) # label(freeRoute3) # label(axiom).  [clausify(39)].
238 -free(A,path4) | -at(A,B,s3) # label(freeRoute4) # label(axiom).  [clausify(40)].
239 -free(A,path4) | -at(A,B,s1) # label(freeRoute4) # label(axiom).  [clausify(40)].
240 free(A,path4) | at(A,B,s3) | at(A,B,s1) # label(freeRoute4) # label(axiom).  [clausify(40)].
241 -free(A,path5) | -at(A,B,s3) # label(freeRoute5) # label(axiom).  [clausify(41)].
242 -free(A,path5) | -at(A,B,s2) # label(freeRoute5) # label(axiom).  [clausify(41)].
243 free(A,path5) | at(A,B,s3) | at(A,B,s2) # label(freeRoute5) # label(axiom).  [clausify(41)].
244 -free(A,path6) | -at(A,B,s4) # label(freeRoute6) # label(axiom).  [clausify(42)].
245 -free(A,path6) | -at(A,B,s1) # label(freeRoute6) # label(axiom).  [clausify(42)].
246 free(A,path6) | at(A,B,s4) | at(A,B,s1) # label(freeRoute6) # label(axiom).  [clausify(42)].
247 -free(A,path7) | -at(A,B,s4) # label(freeRoute7) # label(axiom).  [clausify(43)].
248 -free(A,path7) | -at(A,B,s2) # label(freeRoute7) # label(axiom).  [clausify(43)].
249 free(A,path7) | at(A,B,s4) | at(A,B,s2) # label(freeRoute7) # label(axiom).  [clausify(43)].
250 -nonconflicting(A,path0) | free(A,path0) # label(nonconflicting0) # label(axiom).  [clausify(44)].
251 -nonconflicting(A,path0) | free(A,path1) # label(nonconflicting0) # label(axiom).  [clausify(44)].
252 -nonconflicting(A,path0) | free(A,path2) # label(nonconflicting0) # label(axiom).  [clausify(44)].
253 -nonconflicting(A,path0) | free(A,path3) # label(nonconflicting0) # label(axiom).  [clausify(44)].
254 -nonconflicting(A,path0) | free(A,path4) # label(nonconflicting0) # label(axiom).  [clausify(44)].
255 -nonconflicting(A,path0) | free(A,path5) # label(nonconflicting0) # label(axiom).  [clausify(44)].
256 -nonconflicting(A,path0) | free(A,path6) # label(nonconflicting0) # label(axiom).  [clausify(44)].
257 nonconflicting(A,path0) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path6) # label(nonconflicting0) # label(axiom).  [clausify(44)].
258 -nonconflicting(A,path1) | free(A,path1) # label(nonconflicting1) # label(axiom).  [clausify(45)].
259 -nonconflicting(A,path1) | free(A,path0) # label(nonconflicting1) # label(axiom).  [clausify(45)].
260 -nonconflicting(A,path1) | free(A,path2) # label(nonconflicting1) # label(axiom).  [clausify(45)].
261 -nonconflicting(A,path1) | free(A,path3) # label(nonconflicting1) # label(axiom).  [clausify(45)].
262 -nonconflicting(A,path1) | free(A,path4) # label(nonconflicting1) # label(axiom).  [clausify(45)].
263 -nonconflicting(A,path1) | free(A,path5) # label(nonconflicting1) # label(axiom).  [clausify(45)].
264 -nonconflicting(A,path1) | free(A,path7) # label(nonconflicting1) # label(axiom).  [clausify(45)].
265 nonconflicting(A,path1) | -free(A,path1) | -free(A,path0) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path7) # label(nonconflicting1) # label(axiom).  [clausify(45)].
266 -nonconflicting(A,path2) | free(A,path2) # label(nonconflicting2) # label(axiom).  [clausify(46)].
267 -nonconflicting(A,path2) | free(A,path0) # label(nonconflicting2) # label(axiom).  [clausify(46)].
268 -nonconflicting(A,path2) | free(A,path1) # label(nonconflicting2) # label(axiom).  [clausify(46)].
269 -nonconflicting(A,path2) | free(A,path3) # label(nonconflicting2) # label(axiom).  [clausify(46)].
270 -nonconflicting(A,path2) | free(A,path4) # label(nonconflicting2) # label(axiom).  [clausify(46)].
271 -nonconflicting(A,path2) | free(A,path6) # label(nonconflicting2) # label(axiom).  [clausify(46)].
272 -nonconflicting(A,path2) | free(A,path7) # label(nonconflicting2) # label(axiom).  [clausify(46)].
273 nonconflicting(A,path2) | -free(A,path2) | -free(A,path0) | -free(A,path1) | -free(A,path3) | -free(A,path4) | -free(A,path6) | -free(A,path7) # label(nonconflicting2) # label(axiom).  [clausify(46)].
274 -nonconflicting(A,path3) | free(A,path3) # label(nonconflicting3) # label(axiom).  [clausify(47)].
275 -nonconflicting(A,path3) | free(A,path0) # label(nonconflicting3) # label(axiom).  [clausify(47)].
276 -nonconflicting(A,path3) | free(A,path1) # label(nonconflicting3) # label(axiom).  [clausify(47)].
277 -nonconflicting(A,path3) | free(A,path2) # label(nonconflicting3) # label(axiom).  [clausify(47)].
278 -nonconflicting(A,path3) | free(A,path5) # label(nonconflicting3) # label(axiom).  [clausify(47)].
279 -nonconflicting(A,path3) | free(A,path6) # label(nonconflicting3) # label(axiom).  [clausify(47)].
280 -nonconflicting(A,path3) | free(A,path7) # label(nonconflicting3) # label(axiom).  [clausify(47)].
281 nonconflicting(A,path3) | -free(A,path3) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path5) | -free(A,path6) | -free(A,path7) # label(nonconflicting3) # label(axiom).  [clausify(47)].
282 -nonconflicting(A,path4) | free(A,path4) # label(nonconflicting4) # label(axiom).  [clausify(48)].
283 -nonconflicting(A,path4) | free(A,path0) # label(nonconflicting4) # label(axiom).  [clausify(48)].
284 -nonconflicting(A,path4) | free(A,path1) # label(nonconflicting4) # label(axiom).  [clausify(48)].
285 -nonconflicting(A,path4) | free(A,path2) # label(nonconflicting4) # label(axiom).  [clausify(48)].
286 -nonconflicting(A,path4) | free(A,path5) # label(nonconflicting4) # label(axiom).  [clausify(48)].
287 -nonconflicting(A,path4) | free(A,path6) # label(nonconflicting4) # label(axiom).  [clausify(48)].
288 -nonconflicting(A,path4) | free(A,path7) # label(nonconflicting4) # label(axiom).  [clausify(48)].
289 nonconflicting(A,path4) | -free(A,path4) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path5) | -free(A,path6) | -free(A,path7) # label(nonconflicting4) # label(axiom).  [clausify(48)].
290 -nonconflicting(A,path5) | free(A,path5) # label(nonconflicting5) # label(axiom).  [clausify(49)].
291 -nonconflicting(A,path5) | free(A,path0) # label(nonconflicting5) # label(axiom).  [clausify(49)].
292 -nonconflicting(A,path5) | free(A,path1) # label(nonconflicting5) # label(axiom).  [clausify(49)].
293 -nonconflicting(A,path5) | free(A,path3) # label(nonconflicting5) # label(axiom).  [clausify(49)].
294 -nonconflicting(A,path5) | free(A,path4) # label(nonconflicting5) # label(axiom).  [clausify(49)].
295 -nonconflicting(A,path5) | free(A,path6) # label(nonconflicting5) # label(axiom).  [clausify(49)].
296 -nonconflicting(A,path5) | free(A,path7) # label(nonconflicting5) # label(axiom).  [clausify(49)].
297 nonconflicting(A,path5) | -free(A,path5) | -free(A,path0) | -free(A,path1) | -free(A,path3) | -free(A,path4) | -free(A,path6) | -free(A,path7) # label(nonconflicting5) # label(axiom).  [clausify(49)].
298 -nonconflicting(A,path6) | free(A,path6) # label(nonconflicting6) # label(axiom).  [clausify(50)].
299 -nonconflicting(A,path6) | free(A,path0) # label(nonconflicting6) # label(axiom).  [clausify(50)].
300 -nonconflicting(A,path6) | free(A,path2) # label(nonconflicting6) # label(axiom).  [clausify(50)].
301 -nonconflicting(A,path6) | free(A,path3) # label(nonconflicting6) # label(axiom).  [clausify(50)].
302 -nonconflicting(A,path6) | free(A,path4) # label(nonconflicting6) # label(axiom).  [clausify(50)].
303 -nonconflicting(A,path6) | free(A,path5) # label(nonconflicting6) # label(axiom).  [clausify(50)].
304 -nonconflicting(A,path6) | free(A,path7) # label(nonconflicting6) # label(axiom).  [clausify(50)].
305 nonconflicting(A,path6) | -free(A,path6) | -free(A,path0) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path7) # label(nonconflicting6) # label(axiom).  [clausify(50)].
306 -nonconflicting(A,path7) | free(A,path7) # label(nonconflicting7) # label(axiom).  [clausify(51)].
307 -nonconflicting(A,path7) | free(A,path1) # label(nonconflicting7) # label(axiom).  [clausify(51)].
308 -nonconflicting(A,path7) | free(A,path2) # label(nonconflicting7) # label(axiom).  [clausify(51)].
309 -nonconflicting(A,path7) | free(A,path3) # label(nonconflicting7) # label(axiom).  [clausify(51)].
310 -nonconflicting(A,path7) | free(A,path4) # label(nonconflicting7) # label(axiom).  [clausify(51)].
311 -nonconflicting(A,path7) | free(A,path5) # label(nonconflicting7) # label(axiom).  [clausify(51)].
312 -nonconflicting(A,path7) | free(A,path6) # label(nonconflicting7) # label(axiom).  [clausify(51)].
313 nonconflicting(A,path7) | -free(A,path7) | -free(A,path1) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path6) # label(nonconflicting7) # label(axiom).  [clausify(51)].
314 path1 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
315 path2 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
316 path3 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
317 path4 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
318 path5 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
319 path6 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
320 path7 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].
321 path2 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
322 path3 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
323 path4 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
324 path5 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
325 path6 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
326 path7 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].
327 path3 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
328 path4 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
329 path5 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
330 path6 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
331 path7 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].
332 path4 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
333 path5 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
334 path6 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
335 path7 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].
336 path5 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
337 path6 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
338 path7 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].
339 path6 != path5 # label(routesExclusivity) # label(axiom).  [clausify(52)].
340 path7 != path5 # label(routesExclusivity) # label(axiom).  [clausify(52)].
341 path7 != path6 # label(routesExclusivity) # label(axiom).  [clausify(52)].
342 -available(A,path0) | nonconflicting(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
343 -available(A,path0) | configuration(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
344 available(A,path0) | -nonconflicting(A,path0) | -configuration(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].
345 -available(A,path1) | nonconflicting(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
346 -available(A,path1) | configuration(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
347 available(A,path1) | -nonconflicting(A,path1) | -configuration(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].
348 -available(A,path2) | nonconflicting(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
349 -available(A,path2) | configuration(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
350 available(A,path2) | -nonconflicting(A,path2) | -configuration(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].
351 -available(A,path3) | nonconflicting(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
352 -available(A,path3) | configuration(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
353 available(A,path3) | -nonconflicting(A,path3) | -configuration(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].
354 -available(A,path4) | nonconflicting(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
355 -available(A,path4) | configuration(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
356 available(A,path4) | -nonconflicting(A,path4) | -configuration(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].
357 -available(A,path5) | nonconflicting(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
358 -available(A,path5) | configuration(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
359 available(A,path5) | -nonconflicting(A,path5) | -configuration(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].
360 -available(A,path6) | nonconflicting(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
361 -available(A,path6) | configuration(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
362 available(A,path6) | -nonconflicting(A,path6) | -configuration(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].
363 -available(A,path7) | nonconflicting(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
364 -available(A,path7) | configuration(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
365 available(A,path7) | -nonconflicting(A,path7) | -configuration(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].
366 -wantsToGo(A,in2,out2) | at(A,f4(A),in2) # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
367 -wantsToGo(A,in2,out2) | goal(f4(A)) = out2 # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
368 wantsToGo(A,in2,out2) | -at(A,f4(A),in2) | goal(f4(A)) != out2 # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].
369 -wantsToGo(A,in2,out1) | at(A,f5(A),in2) # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
370 -wantsToGo(A,in2,out1) | goal(f5(A)) = out1 # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
371 wantsToGo(A,in2,out1) | -at(A,f5(A),in2) | goal(f5(A)) != out1 # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].
372 -wantsToGo(A,in1,out2) | at(A,f6(A),in1) # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
373 -wantsToGo(A,in1,out2) | goal(f6(A)) = out2 # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
374 wantsToGo(A,in1,out2) | -at(A,f6(A),in1) | goal(f6(A)) != out2 # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].
375 -wantsToGo(A,in1,out1) | at(A,f7(A),in1) # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
376 -wantsToGo(A,in1,out1) | goal(f7(A)) = out1 # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
377 wantsToGo(A,in1,out1) | -at(A,f7(A),in1) | goal(f7(A)) != out1 # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].
378 -toBeUsed(A,path0) | available(A,path0) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
379 -toBeUsed(A,path0) | clockOrder(A) = in1 # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
380 -toBeUsed(A,path0) | wantsToGo(A,in1,out2) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
381 toBeUsed(A,path0) | -available(A,path0) | clockOrder(A) != in1 | -wantsToGo(A,in1,out2) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].
382 -toBeUsed(A,path1) | available(A,path1) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
383 -toBeUsed(A,path1) | clockOrder(A) = in2 # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
384 -toBeUsed(A,path1) | wantsToGo(A,in2,out2) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
385 toBeUsed(A,path1) | -available(A,path1) | clockOrder(A) != in2 | -wantsToGo(A,in2,out2) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].
386 -toBeUsed(A,path2) | available(A,path2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
387 -toBeUsed(A,path2) | clockOrder(A) = in1 # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
388 -toBeUsed(A,path2) | wantsToGo(A,in1,out2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
389 toBeUsed(A,path2) | -available(A,path2) | clockOrder(A) != in1 | -wantsToGo(A,in1,out2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].
390 -toBeUsed(A,path3) | available(A,path3) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
391 -toBeUsed(A,path3) | clockOrder(A) = in2 # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
392 -toBeUsed(A,path3) | wantsToGo(A,in2,out2) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
393 toBeUsed(A,path3) | -available(A,path3) | clockOrder(A) != in2 | -wantsToGo(A,in2,out2) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].
394 -toBeUsed(A,path4) | available(A,path4) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
395 -toBeUsed(A,path4) | clockOrder(A) = in1 # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
396 -toBeUsed(A,path4) | wantsToGo(A,in1,out1) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
397 toBeUsed(A,path4) | -available(A,path4) | clockOrder(A) != in1 | -wantsToGo(A,in1,out1) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].
398 -toBeUsed(A,path5) | available(A,path5) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
399 -toBeUsed(A,path5) | clockOrder(A) = in2 # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
400 -toBeUsed(A,path5) | wantsToGo(A,in2,out1) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
401 toBeUsed(A,path5) | -available(A,path5) | clockOrder(A) != in2 | -wantsToGo(A,in2,out1) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].
402 -toBeUsed(A,path6) | available(A,path6) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
403 -toBeUsed(A,path6) | clockOrder(A) = in1 # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
404 -toBeUsed(A,path6) | wantsToGo(A,in1,out1) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
405 toBeUsed(A,path6) | -available(A,path6) | clockOrder(A) != in1 | -wantsToGo(A,in1,out1) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].
406 -toBeUsed(A,path7) | available(A,path7) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
407 -toBeUsed(A,path7) | clockOrder(A) = in2 # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
408 -toBeUsed(A,path7) | wantsToGo(A,in2,out1) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
409 toBeUsed(A,path7) | -available(A,path7) | clockOrder(A) != in2 | -wantsToGo(A,in2,out1) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].
410 -configuration(succ(A),B) | configuration(A,B) | toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
411 -configuration(succ(A),B) | -free(A,B) | toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
412 configuration(succ(A),B) | -configuration(A,B) | free(A,B) # label(setPath) # label(axiom).  [clausify(73)].
413 configuration(succ(A),B) | -toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].
414 -open(succ(A),in2) | toBeUsed(A,path1) | toBeUsed(A,path3) | toBeUsed(A,path5) | toBeUsed(A,path7) # label(openGatein2) # label(axiom).  [clausify(74)].
415 open(succ(A),in2) | -toBeUsed(A,path1) # label(openGatein2) # label(axiom).  [clausify(74)].
416 open(succ(A),in2) | -toBeUsed(A,path3) # label(openGatein2) # label(axiom).  [clausify(74)].
417 open(succ(A),in2) | -toBeUsed(A,path5) # label(openGatein2) # label(axiom).  [clausify(74)].
418 open(succ(A),in2) | -toBeUsed(A,path7) # label(openGatein2) # label(axiom).  [clausify(74)].
419 -open(succ(A),in1) | toBeUsed(A,path0) | toBeUsed(A,path2) | toBeUsed(A,path4) | toBeUsed(A,path6) # label(openGatein1) # label(axiom).  [clausify(75)].
420 open(succ(A),in1) | -toBeUsed(A,path0) # label(openGatein1) # label(axiom).  [clausify(75)].
421 open(succ(A),in1) | -toBeUsed(A,path2) # label(openGatein1) # label(axiom).  [clausify(75)].
422 open(succ(A),in1) | -toBeUsed(A,path4) # label(openGatein1) # label(axiom).  [clausify(75)].
423 open(succ(A),in1) | -toBeUsed(A,path6) # label(openGatein1) # label(axiom).  [clausify(75)].
424 at(c1,c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
425 at(succ(c1),c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
426 switch(succ(c1),s4) != switch(c1,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
427 -at(succ(A),B,in2) | appear(A,B,in2) | -open(A,in2).  [resolve(95,c,78,a)].
428 -at(succ(A),B,in1) | appear(A,B,in1) | -open(A,in1).  [resolve(97,c,78,a)].
429 -at(succ(A),B,out2) | less(C,f3(C,B)).  [resolve(99,a,100,a)].
430 -at(succ(A),B,out1) | less(C,f3(C,B)).  [resolve(101,a,100,a)].
431 -at(succ(A),B,s3) | less(C,f3(C,B)).  [resolve(102,a,100,a)].
432 -at(succ(A),B,s4) | less(C,f3(C,B)).  [resolve(103,a,100,a)].
433 -at(succ(A),B,s2) | less(C,f3(C,B)).  [resolve(104,a,100,a)].
434 -at(succ(A),B,s1) | less(C,f3(C,B)).  [resolve(105,a,100,a)].
435 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,out2).  [resolve(106,a,99,a)].
436 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,out1).  [resolve(106,a,101,a)].
437 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s3).  [resolve(106,a,102,a)].
438 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s4).  [resolve(106,a,103,a)].
439 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s2).  [resolve(106,a,104,a)].
440 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s1).  [resolve(106,a,105,a)].
441 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,out2).  [resolve(107,a,99,a)].
442 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,out1).  [resolve(107,a,101,a)].
443 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s3).  [resolve(107,a,102,a)].
444 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s4).  [resolve(107,a,103,a)].
445 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s2).  [resolve(107,a,104,a)].
446 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s1).  [resolve(107,a,105,a)].
447 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,out2).  [resolve(108,a,99,a)].
448 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,out1).  [resolve(108,a,101,a)].
449 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s3).  [resolve(108,a,102,a)].
450 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s4).  [resolve(108,a,103,a)].
451 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s2).  [resolve(108,a,104,a)].
452 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s1).  [resolve(108,a,105,a)].
453 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,out2).  [resolve(109,a,99,a)].
454 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,out1).  [resolve(109,a,101,a)].
455 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s3).  [resolve(109,a,102,a)].
456 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s4).  [resolve(109,a,103,a)].
457 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s2).  [resolve(109,a,104,a)].
458 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s1).  [resolve(109,a,105,a)].
459 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,out2).  [resolve(110,a,99,a)].
460 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,out1).  [resolve(110,a,101,a)].
461 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s3).  [resolve(110,a,102,a)].
462 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s4).  [resolve(110,a,103,a)].
463 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s2).  [resolve(110,a,104,a)].
464 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s1).  [resolve(110,a,105,a)].
465 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,out2).  [resolve(111,a,99,a)].
466 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,out1).  [resolve(111,a,101,a)].
467 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s3).  [resolve(111,a,102,a)].
468 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s4).  [resolve(111,a,103,a)].
469 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s2).  [resolve(111,a,104,a)].
470 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s1).  [resolve(111,a,105,a)].
471 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,out2).  [resolve(112,a,99,a)].
472 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,out1).  [resolve(112,a,101,a)].
473 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s3).  [resolve(112,a,102,a)].
474 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s4).  [resolve(112,a,103,a)].
475 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s2).  [resolve(112,a,104,a)].
476 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s1).  [resolve(112,a,105,a)].
477 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,out2).  [resolve(113,a,99,a)].
478 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,out1).  [resolve(113,a,101,a)].
479 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s3).  [resolve(113,a,102,a)].
480 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s4).  [resolve(113,a,103,a)].
481 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s2).  [resolve(113,a,104,a)].
482 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s1).  [resolve(113,a,105,a)].
483 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,out2).  [resolve(114,a,99,a)].
484 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,out1).  [resolve(114,a,101,a)].
485 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s3).  [resolve(114,a,102,a)].
486 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s4).  [resolve(114,a,103,a)].
487 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s2).  [resolve(114,a,104,a)].
488 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s1).  [resolve(114,a,105,a)].
489 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,out2).  [resolve(115,a,99,a)].
490 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,out1).  [resolve(115,a,101,a)].
491 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s3).  [resolve(115,a,102,a)].
492 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s4).  [resolve(115,a,103,a)].
493 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s2).  [resolve(115,a,104,a)].
494 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s1).  [resolve(115,a,105,a)].
495 less(A,A).  [factor(118,a,b)].
496 switch(succ(A),s3) != out2 | -at(succ(A),B,s3) | at(succ(succ(A)),B,out2).  [factor(437,b,d)].
497 switch(succ(A),s4) != out2 | -at(succ(A),B,s4) | at(succ(succ(A)),B,out2).  [factor(444,b,d)].
498 switch(succ(A),s3) != out1 | -at(succ(A),B,s3) | at(succ(succ(A)),B,out1).  [factor(449,b,d)].
499 switch(succ(A),s4) != out1 | -at(succ(A),B,s4) | at(succ(succ(A)),B,out1).  [factor(456,b,d)].
500 switch(succ(A),s1) != s3 | -at(succ(A),B,s1) | at(succ(succ(A)),B,s3).  [factor(464,b,d)].
501 switch(succ(A),s2) != s3 | -at(succ(A),B,s2) | at(succ(succ(A)),B,s3).  [factor(469,b,d)].
502 switch(succ(A),s1) != s4 | -at(succ(A),B,s1) | at(succ(succ(A)),B,s4).  [factor(476,b,d)].
503 switch(succ(A),s2) != s4 | -at(succ(A),B,s2) | at(succ(succ(A)),B,s4).  [factor(481,b,d)].
end_of_list.

formulas(demodulators).
121 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
122 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.05 seconds.

given #1 (I,wt=9): 116 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].

given #2 (I,wt=9): 117 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].

given #3 (I,wt=6): 118 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].

given #4 (I,wt=4): 119 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].

given #5 (I,wt=7): 120 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].

given #6 (I,wt=5): 121 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #7 (I,wt=5): 122 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #8 (I,wt=5): 123 appear(A,f1(A),in2) # label(alwaysAppearsin2) # label(axiom).  [clausify(7)].

given #9 (I,wt=5): 124 appear(A,f2(A),in1) # label(alwaysAppearsin1) # label(axiom).  [clausify(8)].

given #10 (I,wt=15): 125 switch(A,s3) = out2 | switch(A,s4) = out2 | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].

given #11 (I,wt=14): 126 switch(A,s3) = out2 | at(A,B,s4) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].

given #12 (I,wt=14): 127 at(A,B,s3) | switch(A,s4) = out2 | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].

given #13 (I,wt=13): 128 at(A,B,s3) | at(A,B,s4) | -at(succ(A),B,out2) # label(out2ax1) # label(axiom).  [clausify(10)].

given #14 (I,wt=15): 129 switch(A,s3) = out1 | switch(A,s4) = out1 | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].

given #15 (I,wt=14): 130 switch(A,s3) = out1 | at(A,B,s4) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].

given #16 (I,wt=14): 131 at(A,B,s3) | switch(A,s4) = out1 | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].

given #17 (I,wt=13): 132 at(A,B,s3) | at(A,B,s4) | -at(succ(A),B,out1) # label(out1ax1) # label(axiom).  [clausify(11)].

given #18 (I,wt=15): 133 switch(A,s1) = s3 | switch(A,s2) = s3 | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].

given #19 (I,wt=14): 134 switch(A,s1) = s3 | at(A,B,s2) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].

given #20 (I,wt=14): 135 at(A,B,s1) | switch(A,s2) = s3 | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].

given #21 (I,wt=13): 136 at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s3) # label(s3ax1) # label(axiom).  [clausify(12)].

given #22 (I,wt=15): 137 switch(A,s1) = s4 | switch(A,s2) = s4 | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].

given #23 (I,wt=14): 138 switch(A,s1) = s4 | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].

given #24 (I,wt=14): 139 at(A,B,s1) | switch(A,s2) = s4 | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].

given #25 (I,wt=13): 140 at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].

given #26 (I,wt=8): 141 open(A,in2) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].

given #27 (I,wt=9): 142 at(A,B,in2) | -at(succ(A),B,s2) # label(s2ax1) # label(axiom).  [clausify(14)].

given #28 (I,wt=8): 143 open(A,in1) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].

given #29 (I,wt=9): 144 at(A,B,in1) | -at(succ(A),B,s1) # label(s1ax1) # label(axiom).  [clausify(15)].

given #30 (I,wt=3): 146 in2 != in1.  [copy(145),flip(a)].

given #31 (I,wt=3): 147 s2 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #32 (I,wt=3): 148 s1 != in2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #33 (I,wt=3): 150 in2 != out2.  [copy(149),flip(a)].

given #34 (I,wt=3): 152 in2 != out1.  [copy(151),flip(a)].

given #35 (I,wt=3): 154 in2 != s3.  [copy(153),flip(a)].

given #36 (I,wt=3): 156 in2 != s4.  [copy(155),flip(a)].

given #37 (I,wt=3): 157 s2 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #38 (I,wt=3): 158 s1 != in1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #39 (I,wt=3): 160 in1 != out2.  [copy(159),flip(a)].

given #40 (I,wt=3): 162 in1 != out1.  [copy(161),flip(a)].

given #41 (I,wt=3): 164 in1 != s3.  [copy(163),flip(a)].

given #42 (I,wt=3): 166 in1 != s4.  [copy(165),flip(a)].

given #43 (I,wt=3): 167 s2 != s1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #44 (I,wt=3): 168 s2 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #45 (I,wt=3): 169 s2 != out1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #46 (I,wt=3): 170 s2 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #47 (I,wt=3): 171 s2 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #48 (I,wt=3): 172 s1 != out2 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #49 (I,wt=3): 173 s1 != out1 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #50 (I,wt=3): 174 s1 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #51 (I,wt=3): 175 s1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #52 (I,wt=3): 177 out2 != out1.  [copy(176),flip(a)].

given #53 (I,wt=3): 178 out2 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #54 (I,wt=3): 180 out2 != s4.  [copy(179),flip(a)].

given #55 (I,wt=3): 181 out1 != s3 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #56 (I,wt=3): 182 out1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].

given #57 (I,wt=3): 184 s3 != s4.  [copy(183),flip(a)].

given #58 (I,wt=9): 185 -at(A,B,out2) | -at(succ(A),B,out2) # label(disappearout2) # label(axiom).  [clausify(17)].

given #59 (I,wt=9): 186 -at(A,B,out1) | -at(succ(A),B,out1) # label(disappearout1) # label(axiom).  [clausify(18)].

given #60 (I,wt=11): 187 -at(A,B,C) | -at(A,B,D) | D = C # label(positionInOneNodeAtTime) # label(axiom).  [clausify(19)].

given #61 (I,wt=11): 188 -at(A,B,in2) | C = B | -at(A,C,in2) # label(onlyOneTrainin2) # label(axiom).  [clausify(20)].

given #62 (I,wt=11): 189 -at(A,B,in1) | C = B | -at(A,C,in1) # label(onlyOneTrainin1) # label(axiom).  [clausify(21)].

given #63 (I,wt=13): 190 -at(succ(A),B,in2) | appear(A,B,in2) | at(A,B,in2) # label(appearin2) # label(axiom).  [clausify(22)].

given #64 (I,wt=9): 191 at(succ(A),B,in2) | -appear(A,B,in2) # label(appearin2) # label(axiom).  [clausify(22)].

given #65 (I,wt=12): 192 at(succ(A),B,in2) | -at(A,B,in2) | open(A,in2) # label(appearin2) # label(axiom).  [clausify(22)].

given #66 (I,wt=13): 193 -at(succ(A),B,in1) | appear(A,B,in1) | at(A,B,in1) # label(appearin1) # label(axiom).  [clausify(23)].

given #67 (I,wt=9): 194 at(succ(A),B,in1) | -appear(A,B,in1) # label(appearin1) # label(axiom).  [clausify(23)].

given #68 (I,wt=12): 195 at(succ(A),B,in1) | -at(A,B,in1) | open(A,in1) # label(appearin1) # label(axiom).  [clausify(23)].

given #69 (I,wt=8): 196 goal(A) = out2 | goal(A) = out1 # label(trainGoals) # label(axiom).  [clausify(24)].

given #70 (I,wt=13): 197 succ(A) = A | clockOrder(A) != in2 | clockOrder(succ(A)) = in1 # label(clockOrderin2) # label(axiom).  [clausify(25)].

given #71 (I,wt=13): 198 succ(A) = A | clockOrder(A) = in2 | clockOrder(succ(A)) != in1 # label(clockOrderin2) # label(axiom).  [clausify(25)].

given #72 (I,wt=13): 199 succ(A) = A | clockOrder(A) != in1 | clockOrder(succ(A)) = in2 # label(clockOrderin1) # label(axiom).  [clausify(26)].

given #73 (I,wt=13): 200 succ(A) = A | clockOrder(A) = in1 | clockOrder(succ(A)) != in2 # label(clockOrderin1) # label(axiom).  [clausify(26)].

given #74 (I,wt=8): 201 clockOrder(A) = in2 | clockOrder(A) = in1 # label(clockPossibilities) # label(axiom).  [clausify(27)].

given #75 (I,wt=8): 202 -configuration(A,path0) | switch(A,s3) = out2 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].

given #76 (I,wt=8): 203 -configuration(A,path0) | switch(A,s1) = s3 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].

given #77 (I,wt=13): 204 configuration(A,path0) | switch(A,s3) != out2 | switch(A,s1) != s3 # label(switchesConfiguration0) # label(axiom).  [clausify(28)].

given #78 (I,wt=8): 205 -configuration(A,path1) | switch(A,s3) = out2 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].

given #79 (I,wt=8): 206 -configuration(A,path1) | switch(A,s2) = s3 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].

given #80 (I,wt=13): 207 configuration(A,path1) | switch(A,s3) != out2 | switch(A,s2) != s3 # label(switchesConfiguration1) # label(axiom).  [clausify(29)].

given #81 (I,wt=8): 208 -configuration(A,path2) | switch(A,s4) = out2 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].

given #82 (I,wt=8): 209 -configuration(A,path2) | switch(A,s1) = s4 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].

given #83 (I,wt=13): 210 configuration(A,path2) | switch(A,s4) != out2 | switch(A,s1) != s4 # label(switchesConfiguration2) # label(axiom).  [clausify(30)].

given #84 (I,wt=8): 211 -configuration(A,path3) | switch(A,s4) = out2 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].

given #85 (I,wt=8): 212 -configuration(A,path3) | switch(A,s2) = s4 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].

given #86 (I,wt=13): 213 configuration(A,path3) | switch(A,s4) != out2 | switch(A,s2) != s4 # label(switchesConfiguration3) # label(axiom).  [clausify(31)].

given #87 (I,wt=8): 214 -configuration(A,path4) | switch(A,s3) = out1 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].

given #88 (I,wt=8): 215 -configuration(A,path4) | switch(A,s1) = s3 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].

given #89 (I,wt=13): 216 configuration(A,path4) | switch(A,s3) != out1 | switch(A,s1) != s3 # label(switchesConfiguration4) # label(axiom).  [clausify(32)].

given #90 (I,wt=8): 217 -configuration(A,path5) | switch(A,s3) = out1 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].

given #91 (I,wt=8): 218 -configuration(A,path5) | switch(A,s2) = s3 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].

given #92 (I,wt=13): 219 configuration(A,path5) | switch(A,s3) != out1 | switch(A,s2) != s3 # label(switchesConfiguration5) # label(axiom).  [clausify(33)].

given #93 (I,wt=8): 220 -configuration(A,path6) | switch(A,s4) = out1 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].

given #94 (I,wt=8): 221 -configuration(A,path6) | switch(A,s1) = s4 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].

given #95 (I,wt=13): 222 configuration(A,path6) | switch(A,s4) != out1 | switch(A,s1) != s4 # label(switchesConfiguration6) # label(axiom).  [clausify(34)].

given #96 (I,wt=8): 223 -configuration(A,path7) | switch(A,s4) = out1 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].

given #97 (I,wt=8): 224 -configuration(A,path7) | switch(A,s2) = s4 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].

given #98 (I,wt=13): 225 configuration(A,path7) | switch(A,s4) != out1 | switch(A,s2) != s4 # label(switchesConfiguration7) # label(axiom).  [clausify(35)].

given #99 (I,wt=7): 226 -free(A,path0) | -at(A,B,s3) # label(freeRoute0) # label(axiom).  [clausify(36)].

given #100 (I,wt=7): 227 -free(A,path0) | -at(A,B,s1) # label(freeRoute0) # label(axiom).  [clausify(36)].

given #101 (I,wt=11): 228 free(A,path0) | at(A,B,s3) | at(A,B,s1) # label(freeRoute0) # label(axiom).  [clausify(36)].

given #102 (I,wt=7): 229 -free(A,path1) | -at(A,B,s3) # label(freeRoute1) # label(axiom).  [clausify(37)].

given #103 (I,wt=7): 230 -free(A,path1) | -at(A,B,s2) # label(freeRoute1) # label(axiom).  [clausify(37)].

given #104 (I,wt=11): 231 free(A,path1) | at(A,B,s3) | at(A,B,s2) # label(freeRoute1) # label(axiom).  [clausify(37)].

given #105 (I,wt=7): 232 -free(A,path2) | -at(A,B,s4) # label(freeRoute2) # label(axiom).  [clausify(38)].

given #106 (I,wt=7): 233 -free(A,path2) | -at(A,B,s1) # label(freeRoute2) # label(axiom).  [clausify(38)].

given #107 (I,wt=11): 234 free(A,path2) | at(A,B,s4) | at(A,B,s1) # label(freeRoute2) # label(axiom).  [clausify(38)].

given #108 (I,wt=7): 235 -free(A,path3) | -at(A,B,s4) # label(freeRoute3) # label(axiom).  [clausify(39)].

given #109 (I,wt=7): 236 -free(A,path3) | -at(A,B,s2) # label(freeRoute3) # label(axiom).  [clausify(39)].

given #110 (I,wt=11): 237 free(A,path3) | at(A,B,s4) | at(A,B,s2) # label(freeRoute3) # label(axiom).  [clausify(39)].

given #111 (I,wt=7): 238 -free(A,path4) | -at(A,B,s3) # label(freeRoute4) # label(axiom).  [clausify(40)].

given #112 (I,wt=7): 239 -free(A,path4) | -at(A,B,s1) # label(freeRoute4) # label(axiom).  [clausify(40)].

given #113 (I,wt=11): 240 free(A,path4) | at(A,B,s3) | at(A,B,s1) # label(freeRoute4) # label(axiom).  [clausify(40)].

given #114 (I,wt=7): 241 -free(A,path5) | -at(A,B,s3) # label(freeRoute5) # label(axiom).  [clausify(41)].

given #115 (I,wt=7): 242 -free(A,path5) | -at(A,B,s2) # label(freeRoute5) # label(axiom).  [clausify(41)].

given #116 (I,wt=11): 243 free(A,path5) | at(A,B,s3) | at(A,B,s2) # label(freeRoute5) # label(axiom).  [clausify(41)].

given #117 (I,wt=7): 244 -free(A,path6) | -at(A,B,s4) # label(freeRoute6) # label(axiom).  [clausify(42)].

given #118 (I,wt=7): 245 -free(A,path6) | -at(A,B,s1) # label(freeRoute6) # label(axiom).  [clausify(42)].

given #119 (I,wt=11): 246 free(A,path6) | at(A,B,s4) | at(A,B,s1) # label(freeRoute6) # label(axiom).  [clausify(42)].

given #120 (I,wt=7): 247 -free(A,path7) | -at(A,B,s4) # label(freeRoute7) # label(axiom).  [clausify(43)].

given #121 (I,wt=7): 248 -free(A,path7) | -at(A,B,s2) # label(freeRoute7) # label(axiom).  [clausify(43)].

given #122 (I,wt=11): 249 free(A,path7) | at(A,B,s4) | at(A,B,s2) # label(freeRoute7) # label(axiom).  [clausify(43)].

given #123 (I,wt=6): 250 -nonconflicting(A,path0) | free(A,path0) # label(nonconflicting0) # label(axiom).  [clausify(44)].

given #124 (I,wt=6): 251 -nonconflicting(A,path0) | free(A,path1) # label(nonconflicting0) # label(axiom).  [clausify(44)].

given #125 (I,wt=6): 252 -nonconflicting(A,path0) | free(A,path2) # label(nonconflicting0) # label(axiom).  [clausify(44)].

given #126 (I,wt=6): 253 -nonconflicting(A,path0) | free(A,path3) # label(nonconflicting0) # label(axiom).  [clausify(44)].

given #127 (I,wt=6): 254 -nonconflicting(A,path0) | free(A,path4) # label(nonconflicting0) # label(axiom).  [clausify(44)].

given #128 (I,wt=6): 255 -nonconflicting(A,path0) | free(A,path5) # label(nonconflicting0) # label(axiom).  [clausify(44)].

given #129 (I,wt=6): 256 -nonconflicting(A,path0) | free(A,path6) # label(nonconflicting0) # label(axiom).  [clausify(44)].

given #130 (I,wt=24): 257 nonconflicting(A,path0) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path6) # label(nonconflicting0) # label(axiom).  [clausify(44)].

given #131 (I,wt=6): 258 -nonconflicting(A,path1) | free(A,path1) # label(nonconflicting1) # label(axiom).  [clausify(45)].

given #132 (I,wt=6): 259 -nonconflicting(A,path1) | free(A,path0) # label(nonconflicting1) # label(axiom).  [clausify(45)].

given #133 (I,wt=6): 260 -nonconflicting(A,path1) | free(A,path2) # label(nonconflicting1) # label(axiom).  [clausify(45)].

given #134 (I,wt=6): 261 -nonconflicting(A,path1) | free(A,path3) # label(nonconflicting1) # label(axiom).  [clausify(45)].

given #135 (I,wt=6): 262 -nonconflicting(A,path1) | free(A,path4) # label(nonconflicting1) # label(axiom).  [clausify(45)].

given #136 (I,wt=6): 263 -nonconflicting(A,path1) | free(A,path5) # label(nonconflicting1) # label(axiom).  [clausify(45)].

given #137 (I,wt=6): 264 -nonconflicting(A,path1) | free(A,path7) # label(nonconflicting1) # label(axiom).  [clausify(45)].

given #138 (I,wt=24): 265 nonconflicting(A,path1) | -free(A,path1) | -free(A,path0) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path7) # label(nonconflicting1) # label(axiom).  [clausify(45)].

given #139 (I,wt=6): 266 -nonconflicting(A,path2) | free(A,path2) # label(nonconflicting2) # label(axiom).  [clausify(46)].

given #140 (I,wt=6): 267 -nonconflicting(A,path2) | free(A,path0) # label(nonconflicting2) # label(axiom).  [clausify(46)].

given #141 (I,wt=6): 268 -nonconflicting(A,path2) | free(A,path1) # label(nonconflicting2) # label(axiom).  [clausify(46)].

given #142 (I,wt=6): 269 -nonconflicting(A,path2) | free(A,path3) # label(nonconflicting2) # label(axiom).  [clausify(46)].

given #143 (I,wt=6): 270 -nonconflicting(A,path2) | free(A,path4) # label(nonconflicting2) # label(axiom).  [clausify(46)].

given #144 (I,wt=6): 271 -nonconflicting(A,path2) | free(A,path6) # label(nonconflicting2) # label(axiom).  [clausify(46)].

given #145 (I,wt=6): 272 -nonconflicting(A,path2) | free(A,path7) # label(nonconflicting2) # label(axiom).  [clausify(46)].

given #146 (I,wt=24): 273 nonconflicting(A,path2) | -free(A,path2) | -free(A,path0) | -free(A,path1) | -free(A,path3) | -free(A,path4) | -free(A,path6) | -free(A,path7) # label(nonconflicting2) # label(axiom).  [clausify(46)].

given #147 (I,wt=6): 274 -nonconflicting(A,path3) | free(A,path3) # label(nonconflicting3) # label(axiom).  [clausify(47)].

given #148 (I,wt=6): 275 -nonconflicting(A,path3) | free(A,path0) # label(nonconflicting3) # label(axiom).  [clausify(47)].

given #149 (I,wt=6): 276 -nonconflicting(A,path3) | free(A,path1) # label(nonconflicting3) # label(axiom).  [clausify(47)].

given #150 (I,wt=6): 277 -nonconflicting(A,path3) | free(A,path2) # label(nonconflicting3) # label(axiom).  [clausify(47)].

given #151 (I,wt=6): 278 -nonconflicting(A,path3) | free(A,path5) # label(nonconflicting3) # label(axiom).  [clausify(47)].

given #152 (I,wt=6): 279 -nonconflicting(A,path3) | free(A,path6) # label(nonconflicting3) # label(axiom).  [clausify(47)].

given #153 (I,wt=6): 280 -nonconflicting(A,path3) | free(A,path7) # label(nonconflicting3) # label(axiom).  [clausify(47)].

given #154 (I,wt=24): 281 nonconflicting(A,path3) | -free(A,path3) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path5) | -free(A,path6) | -free(A,path7) # label(nonconflicting3) # label(axiom).  [clausify(47)].

given #155 (I,wt=6): 282 -nonconflicting(A,path4) | free(A,path4) # label(nonconflicting4) # label(axiom).  [clausify(48)].

given #156 (I,wt=6): 283 -nonconflicting(A,path4) | free(A,path0) # label(nonconflicting4) # label(axiom).  [clausify(48)].

given #157 (I,wt=6): 284 -nonconflicting(A,path4) | free(A,path1) # label(nonconflicting4) # label(axiom).  [clausify(48)].

given #158 (I,wt=6): 285 -nonconflicting(A,path4) | free(A,path2) # label(nonconflicting4) # label(axiom).  [clausify(48)].

given #159 (I,wt=6): 286 -nonconflicting(A,path4) | free(A,path5) # label(nonconflicting4) # label(axiom).  [clausify(48)].

given #160 (I,wt=6): 287 -nonconflicting(A,path4) | free(A,path6) # label(nonconflicting4) # label(axiom).  [clausify(48)].

given #161 (I,wt=6): 288 -nonconflicting(A,path4) | free(A,path7) # label(nonconflicting4) # label(axiom).  [clausify(48)].

given #162 (I,wt=24): 289 nonconflicting(A,path4) | -free(A,path4) | -free(A,path0) | -free(A,path1) | -free(A,path2) | -free(A,path5) | -free(A,path6) | -free(A,path7) # label(nonconflicting4) # label(axiom).  [clausify(48)].

given #163 (I,wt=6): 290 -nonconflicting(A,path5) | free(A,path5) # label(nonconflicting5) # label(axiom).  [clausify(49)].

given #164 (I,wt=6): 291 -nonconflicting(A,path5) | free(A,path0) # label(nonconflicting5) # label(axiom).  [clausify(49)].

given #165 (I,wt=6): 292 -nonconflicting(A,path5) | free(A,path1) # label(nonconflicting5) # label(axiom).  [clausify(49)].

given #166 (I,wt=6): 293 -nonconflicting(A,path5) | free(A,path3) # label(nonconflicting5) # label(axiom).  [clausify(49)].

given #167 (I,wt=6): 294 -nonconflicting(A,path5) | free(A,path4) # label(nonconflicting5) # label(axiom).  [clausify(49)].

given #168 (I,wt=6): 295 -nonconflicting(A,path5) | free(A,path6) # label(nonconflicting5) # label(axiom).  [clausify(49)].

given #169 (I,wt=6): 296 -nonconflicting(A,path5) | free(A,path7) # label(nonconflicting5) # label(axiom).  [clausify(49)].

given #170 (I,wt=24): 297 nonconflicting(A,path5) | -free(A,path5) | -free(A,path0) | -free(A,path1) | -free(A,path3) | -free(A,path4) | -free(A,path6) | -free(A,path7) # label(nonconflicting5) # label(axiom).  [clausify(49)].

given #171 (I,wt=6): 298 -nonconflicting(A,path6) | free(A,path6) # label(nonconflicting6) # label(axiom).  [clausify(50)].

given #172 (I,wt=6): 299 -nonconflicting(A,path6) | free(A,path0) # label(nonconflicting6) # label(axiom).  [clausify(50)].

given #173 (I,wt=6): 300 -nonconflicting(A,path6) | free(A,path2) # label(nonconflicting6) # label(axiom).  [clausify(50)].

given #174 (I,wt=6): 301 -nonconflicting(A,path6) | free(A,path3) # label(nonconflicting6) # label(axiom).  [clausify(50)].

given #175 (I,wt=6): 302 -nonconflicting(A,path6) | free(A,path4) # label(nonconflicting6) # label(axiom).  [clausify(50)].

given #176 (I,wt=6): 303 -nonconflicting(A,path6) | free(A,path5) # label(nonconflicting6) # label(axiom).  [clausify(50)].

given #177 (I,wt=6): 304 -nonconflicting(A,path6) | free(A,path7) # label(nonconflicting6) # label(axiom).  [clausify(50)].

given #178 (I,wt=24): 305 nonconflicting(A,path6) | -free(A,path6) | -free(A,path0) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path7) # label(nonconflicting6) # label(axiom).  [clausify(50)].

given #179 (I,wt=6): 306 -nonconflicting(A,path7) | free(A,path7) # label(nonconflicting7) # label(axiom).  [clausify(51)].

given #180 (I,wt=6): 307 -nonconflicting(A,path7) | free(A,path1) # label(nonconflicting7) # label(axiom).  [clausify(51)].

given #181 (I,wt=6): 308 -nonconflicting(A,path7) | free(A,path2) # label(nonconflicting7) # label(axiom).  [clausify(51)].

given #182 (I,wt=6): 309 -nonconflicting(A,path7) | free(A,path3) # label(nonconflicting7) # label(axiom).  [clausify(51)].

given #183 (I,wt=6): 310 -nonconflicting(A,path7) | free(A,path4) # label(nonconflicting7) # label(axiom).  [clausify(51)].

given #184 (I,wt=6): 311 -nonconflicting(A,path7) | free(A,path5) # label(nonconflicting7) # label(axiom).  [clausify(51)].

given #185 (I,wt=6): 312 -nonconflicting(A,path7) | free(A,path6) # label(nonconflicting7) # label(axiom).  [clausify(51)].

given #186 (I,wt=24): 313 nonconflicting(A,path7) | -free(A,path7) | -free(A,path1) | -free(A,path2) | -free(A,path3) | -free(A,path4) | -free(A,path5) | -free(A,path6) # label(nonconflicting7) # label(axiom).  [clausify(51)].

given #187 (I,wt=3): 314 path1 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #188 (I,wt=3): 315 path2 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #189 (I,wt=3): 316 path3 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #190 (I,wt=3): 317 path4 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #191 (I,wt=3): 318 path5 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #192 (I,wt=3): 319 path6 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #193 (I,wt=3): 320 path7 != path0 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #194 (I,wt=3): 321 path2 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #195 (I,wt=3): 322 path3 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #196 (I,wt=3): 323 path4 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #197 (I,wt=3): 324 path5 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #198 (I,wt=3): 325 path6 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #199 (I,wt=3): 326 path7 != path1 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #200 (I,wt=3): 327 path3 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #201 (I,wt=3): 328 path4 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #202 (I,wt=3): 329 path5 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #203 (I,wt=3): 330 path6 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #204 (I,wt=3): 331 path7 != path2 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #205 (I,wt=3): 332 path4 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #206 (I,wt=3): 333 path5 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #207 (I,wt=3): 334 path6 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #208 (I,wt=3): 335 path7 != path3 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #209 (I,wt=3): 336 path5 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #210 (I,wt=3): 337 path6 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #211 (I,wt=3): 338 path7 != path4 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #212 (I,wt=3): 339 path6 != path5 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #213 (I,wt=3): 340 path7 != path5 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #214 (I,wt=3): 341 path7 != path6 # label(routesExclusivity) # label(axiom).  [clausify(52)].

given #215 (I,wt=6): 342 -available(A,path0) | nonconflicting(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].

given #216 (I,wt=6): 343 -available(A,path0) | configuration(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].

given #217 (I,wt=9): 344 available(A,path0) | -nonconflicting(A,path0) | -configuration(A,path0) # label(availableRoute0) # label(axiom).  [clausify(53)].

given #218 (I,wt=6): 345 -available(A,path1) | nonconflicting(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].

given #219 (I,wt=6): 346 -available(A,path1) | configuration(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].

given #220 (I,wt=9): 347 available(A,path1) | -nonconflicting(A,path1) | -configuration(A,path1) # label(availableRoute1) # label(axiom).  [clausify(54)].

given #221 (I,wt=6): 348 -available(A,path2) | nonconflicting(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].

given #222 (I,wt=6): 349 -available(A,path2) | configuration(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].

given #223 (I,wt=9): 350 available(A,path2) | -nonconflicting(A,path2) | -configuration(A,path2) # label(availableRoute2) # label(axiom).  [clausify(55)].

given #224 (I,wt=6): 351 -available(A,path3) | nonconflicting(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].

given #225 (I,wt=6): 352 -available(A,path3) | configuration(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].

given #226 (I,wt=9): 353 available(A,path3) | -nonconflicting(A,path3) | -configuration(A,path3) # label(availableRoute3) # label(axiom).  [clausify(56)].

given #227 (I,wt=6): 354 -available(A,path4) | nonconflicting(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].

given #228 (I,wt=6): 355 -available(A,path4) | configuration(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].

given #229 (I,wt=9): 356 available(A,path4) | -nonconflicting(A,path4) | -configuration(A,path4) # label(availableRoute4) # label(axiom).  [clausify(57)].

given #230 (I,wt=6): 357 -available(A,path5) | nonconflicting(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].

given #231 (I,wt=6): 358 -available(A,path5) | configuration(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].

given #232 (I,wt=9): 359 available(A,path5) | -nonconflicting(A,path5) | -configuration(A,path5) # label(availableRoute5) # label(axiom).  [clausify(58)].

given #233 (I,wt=6): 360 -available(A,path6) | nonconflicting(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].

given #234 (I,wt=6): 361 -available(A,path6) | configuration(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].

given #235 (I,wt=9): 362 available(A,path6) | -nonconflicting(A,path6) | -configuration(A,path6) # label(availableRoute6) # label(axiom).  [clausify(59)].

given #236 (I,wt=6): 363 -available(A,path7) | nonconflicting(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].

given #237 (I,wt=6): 364 -available(A,path7) | configuration(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].

given #238 (I,wt=9): 365 available(A,path7) | -nonconflicting(A,path7) | -configuration(A,path7) # label(availableRoute7) # label(axiom).  [clausify(60)].

given #239 (I,wt=9): 366 -wantsToGo(A,in2,out2) | at(A,f4(A),in2) # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].

given #240 (I,wt=9): 367 -wantsToGo(A,in2,out2) | goal(f4(A)) = out2 # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].

given #241 (I,wt=14): 368 wantsToGo(A,in2,out2) | -at(A,f4(A),in2) | goal(f4(A)) != out2 # label(wantsToGoin2out2) # label(axiom).  [clausify(61)].

given #242 (I,wt=9): 369 -wantsToGo(A,in2,out1) | at(A,f5(A),in2) # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].

given #243 (I,wt=9): 370 -wantsToGo(A,in2,out1) | goal(f5(A)) = out1 # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].

given #244 (I,wt=14): 371 wantsToGo(A,in2,out1) | -at(A,f5(A),in2) | goal(f5(A)) != out1 # label(wantsToGoin2out1) # label(axiom).  [clausify(62)].

given #245 (I,wt=9): 372 -wantsToGo(A,in1,out2) | at(A,f6(A),in1) # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].

given #246 (I,wt=9): 373 -wantsToGo(A,in1,out2) | goal(f6(A)) = out2 # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].

given #247 (I,wt=14): 374 wantsToGo(A,in1,out2) | -at(A,f6(A),in1) | goal(f6(A)) != out2 # label(wantsToGoin1out2) # label(axiom).  [clausify(63)].

given #248 (I,wt=9): 375 -wantsToGo(A,in1,out1) | at(A,f7(A),in1) # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].

given #249 (I,wt=9): 376 -wantsToGo(A,in1,out1) | goal(f7(A)) = out1 # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].

given #250 (I,wt=14): 377 wantsToGo(A,in1,out1) | -at(A,f7(A),in1) | goal(f7(A)) != out1 # label(wantsToGoin1out1) # label(axiom).  [clausify(64)].

given #251 (I,wt=6): 378 -toBeUsed(A,path0) | available(A,path0) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].

given #252 (I,wt=7): 379 -toBeUsed(A,path0) | clockOrder(A) = in1 # label(pathToBeUsed0) # label(axiom).  [clausify(65)].

given #253 (I,wt=7): 380 -toBeUsed(A,path0) | wantsToGo(A,in1,out2) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].

given #254 (I,wt=14): 381 toBeUsed(A,path0) | -available(A,path0) | clockOrder(A) != in1 | -wantsToGo(A,in1,out2) # label(pathToBeUsed0) # label(axiom).  [clausify(65)].

given #255 (I,wt=6): 382 -toBeUsed(A,path1) | available(A,path1) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].

given #256 (I,wt=7): 383 -toBeUsed(A,path1) | clockOrder(A) = in2 # label(pathToBeUsed1) # label(axiom).  [clausify(66)].

given #257 (I,wt=7): 384 -toBeUsed(A,path1) | wantsToGo(A,in2,out2) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].

given #258 (I,wt=14): 385 toBeUsed(A,path1) | -available(A,path1) | clockOrder(A) != in2 | -wantsToGo(A,in2,out2) # label(pathToBeUsed1) # label(axiom).  [clausify(66)].

given #259 (I,wt=6): 386 -toBeUsed(A,path2) | available(A,path2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].

given #260 (I,wt=7): 387 -toBeUsed(A,path2) | clockOrder(A) = in1 # label(pathToBeUsed2) # label(axiom).  [clausify(67)].

given #261 (I,wt=7): 388 -toBeUsed(A,path2) | wantsToGo(A,in1,out2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].

given #262 (I,wt=14): 389 toBeUsed(A,path2) | -available(A,path2) | clockOrder(A) != in1 | -wantsToGo(A,in1,out2) # label(pathToBeUsed2) # label(axiom).  [clausify(67)].

given #263 (I,wt=6): 390 -toBeUsed(A,path3) | available(A,path3) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].

given #264 (I,wt=7): 391 -toBeUsed(A,path3) | clockOrder(A) = in2 # label(pathToBeUsed3) # label(axiom).  [clausify(68)].

given #265 (I,wt=7): 392 -toBeUsed(A,path3) | wantsToGo(A,in2,out2) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].

given #266 (I,wt=14): 393 toBeUsed(A,path3) | -available(A,path3) | clockOrder(A) != in2 | -wantsToGo(A,in2,out2) # label(pathToBeUsed3) # label(axiom).  [clausify(68)].

given #267 (I,wt=6): 394 -toBeUsed(A,path4) | available(A,path4) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].

given #268 (I,wt=7): 395 -toBeUsed(A,path4) | clockOrder(A) = in1 # label(pathToBeUsed4) # label(axiom).  [clausify(69)].

given #269 (I,wt=7): 396 -toBeUsed(A,path4) | wantsToGo(A,in1,out1) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].

given #270 (I,wt=14): 397 toBeUsed(A,path4) | -available(A,path4) | clockOrder(A) != in1 | -wantsToGo(A,in1,out1) # label(pathToBeUsed4) # label(axiom).  [clausify(69)].

given #271 (I,wt=6): 398 -toBeUsed(A,path5) | available(A,path5) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].

given #272 (I,wt=7): 399 -toBeUsed(A,path5) | clockOrder(A) = in2 # label(pathToBeUsed5) # label(axiom).  [clausify(70)].

given #273 (I,wt=7): 400 -toBeUsed(A,path5) | wantsToGo(A,in2,out1) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].

given #274 (I,wt=14): 401 toBeUsed(A,path5) | -available(A,path5) | clockOrder(A) != in2 | -wantsToGo(A,in2,out1) # label(pathToBeUsed5) # label(axiom).  [clausify(70)].

given #275 (I,wt=6): 402 -toBeUsed(A,path6) | available(A,path6) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].

given #276 (I,wt=7): 403 -toBeUsed(A,path6) | clockOrder(A) = in1 # label(pathToBeUsed6) # label(axiom).  [clausify(71)].

given #277 (I,wt=7): 404 -toBeUsed(A,path6) | wantsToGo(A,in1,out1) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].

given #278 (I,wt=14): 405 toBeUsed(A,path6) | -available(A,path6) | clockOrder(A) != in1 | -wantsToGo(A,in1,out1) # label(pathToBeUsed6) # label(axiom).  [clausify(71)].

given #279 (I,wt=6): 406 -toBeUsed(A,path7) | available(A,path7) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].

given #280 (I,wt=7): 407 -toBeUsed(A,path7) | clockOrder(A) = in2 # label(pathToBeUsed7) # label(axiom).  [clausify(72)].

given #281 (I,wt=7): 408 -toBeUsed(A,path7) | wantsToGo(A,in2,out1) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].

given #282 (I,wt=14): 409 toBeUsed(A,path7) | -available(A,path7) | clockOrder(A) != in2 | -wantsToGo(A,in2,out1) # label(pathToBeUsed7) # label(axiom).  [clausify(72)].

given #283 (I,wt=10): 410 -configuration(succ(A),B) | configuration(A,B) | toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].

given #284 (I,wt=10): 411 -configuration(succ(A),B) | -free(A,B) | toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].

given #285 (I,wt=10): 412 configuration(succ(A),B) | -configuration(A,B) | free(A,B) # label(setPath) # label(axiom).  [clausify(73)].

given #286 (I,wt=7): 413 configuration(succ(A),B) | -toBeUsed(A,B) # label(setPath) # label(axiom).  [clausify(73)].

given #287 (I,wt=16): 414 -open(succ(A),in2) | toBeUsed(A,path1) | toBeUsed(A,path3) | toBeUsed(A,path5) | toBeUsed(A,path7) # label(openGatein2) # label(axiom).  [clausify(74)].

given #288 (I,wt=7): 415 open(succ(A),in2) | -toBeUsed(A,path1) # label(openGatein2) # label(axiom).  [clausify(74)].

given #289 (I,wt=7): 416 open(succ(A),in2) | -toBeUsed(A,path3) # label(openGatein2) # label(axiom).  [clausify(74)].

given #290 (I,wt=7): 417 open(succ(A),in2) | -toBeUsed(A,path5) # label(openGatein2) # label(axiom).  [clausify(74)].

given #291 (I,wt=7): 418 open(succ(A),in2) | -toBeUsed(A,path7) # label(openGatein2) # label(axiom).  [clausify(74)].

given #292 (I,wt=16): 419 -open(succ(A),in1) | toBeUsed(A,path0) | toBeUsed(A,path2) | toBeUsed(A,path4) | toBeUsed(A,path6) # label(openGatein1) # label(axiom).  [clausify(75)].

given #293 (I,wt=7): 420 open(succ(A),in1) | -toBeUsed(A,path0) # label(openGatein1) # label(axiom).  [clausify(75)].

given #294 (I,wt=7): 421 open(succ(A),in1) | -toBeUsed(A,path2) # label(openGatein1) # label(axiom).  [clausify(75)].

given #295 (I,wt=7): 422 open(succ(A),in1) | -toBeUsed(A,path4) # label(openGatein1) # label(axiom).  [clausify(75)].

given #296 (I,wt=7): 423 open(succ(A),in1) | -toBeUsed(A,path6) # label(openGatein1) # label(axiom).  [clausify(75)].

given #297 (I,wt=4): 424 at(c1,c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].

given #298 (I,wt=5): 425 at(succ(c1),c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].

given #299 (I,wt=8): 426 switch(succ(c1),s4) != switch(c1,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].

given #300 (I,wt=12): 427 -at(succ(A),B,in2) | appear(A,B,in2) | -open(A,in2).  [resolve(95,c,78,a)].

given #301 (I,wt=12): 428 -at(succ(A),B,in1) | appear(A,B,in1) | -open(A,in1).  [resolve(97,c,78,a)].

given #302 (I,wt=10): 429 -at(succ(A),B,out2) | less(C,f3(C,B)).  [resolve(99,a,100,a)].

given #303 (I,wt=10): 430 -at(succ(A),B,out1) | less(C,f3(C,B)).  [resolve(101,a,100,a)].

given #304 (I,wt=10): 431 -at(succ(A),B,s3) | less(C,f3(C,B)).  [resolve(102,a,100,a)].

given #305 (I,wt=10): 432 -at(succ(A),B,s4) | less(C,f3(C,B)).  [resolve(103,a,100,a)].

given #306 (I,wt=10): 433 -at(succ(A),B,s2) | less(C,f3(C,B)).  [resolve(104,a,100,a)].

given #307 (I,wt=10): 434 -at(succ(A),B,s1) | less(C,f3(C,B)).  [resolve(105,a,100,a)].

given #308 (I,wt=19): 435 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,out2).  [resolve(106,a,99,a)].

given #309 (I,wt=19): 436 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,out1).  [resolve(106,a,101,a)].

given #310 (I,wt=19): 437 switch(A,s3) != out2 | -at(A,B,s3) | at(succ(A),B,out2) | -at(succ(C),B,s3).  [resolve(106,a,102,a)].

given #311 (I,wt=19): 441 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,out2).  [resolve(107,a,99,a)].

given #312 (I,wt=19): 442 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,out1).  [resolve(107,a,101,a)].

given #313 (I,wt=19): 443 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s3).  [resolve(107,a,102,a)].

given #314 (I,wt=19): 444 switch(A,s4) != out2 | -at(A,B,s4) | at(succ(A),B,out2) | -at(succ(C),B,s4).  [resolve(107,a,103,a)].

given #315 (I,wt=19): 447 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,out2).  [resolve(108,a,99,a)].

given #316 (I,wt=19): 448 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,out1).  [resolve(108,a,101,a)].

given #317 (I,wt=19): 449 switch(A,s3) != out1 | -at(A,B,s3) | at(succ(A),B,out1) | -at(succ(C),B,s3).  [resolve(108,a,102,a)].

given #318 (I,wt=19): 453 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,out2).  [resolve(109,a,99,a)].

given #319 (I,wt=19): 454 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,out1).  [resolve(109,a,101,a)].

given #320 (I,wt=19): 455 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s3).  [resolve(109,a,102,a)].

given #321 (I,wt=19): 456 switch(A,s4) != out1 | -at(A,B,s4) | at(succ(A),B,out1) | -at(succ(C),B,s4).  [resolve(109,a,103,a)].

given #322 (I,wt=19): 459 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,out2).  [resolve(110,a,99,a)].

given #323 (I,wt=19): 460 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,out1).  [resolve(110,a,101,a)].

given #324 (I,wt=19): 461 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s3).  [resolve(110,a,102,a)].

given #325 (I,wt=19): 462 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s4).  [resolve(110,a,103,a)].

given #326 (I,wt=19): 463 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s2).  [resolve(110,a,104,a)].

given #327 (I,wt=19): 464 switch(A,s1) != s3 | -at(A,B,s1) | at(succ(A),B,s3) | -at(succ(C),B,s1).  [resolve(110,a,105,a)].

given #328 (I,wt=19): 465 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,out2).  [resolve(111,a,99,a)].

given #329 (I,wt=19): 466 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,out1).  [resolve(111,a,101,a)].

given #330 (I,wt=19): 467 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s3).  [resolve(111,a,102,a)].

given #331 (I,wt=19): 468 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s4).  [resolve(111,a,103,a)].

given #332 (I,wt=19): 469 switch(A,s2) != s3 | -at(A,B,s2) | at(succ(A),B,s3) | -at(succ(C),B,s2).  [resolve(111,a,104,a)].

given #333 (I,wt=19): 471 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,out2).  [resolve(112,a,99,a)].

given #334 (I,wt=19): 472 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,out1).  [resolve(112,a,101,a)].

given #335 (I,wt=19): 473 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s3).  [resolve(112,a,102,a)].

given #336 (I,wt=19): 474 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s4).  [resolve(112,a,103,a)].

given #337 (I,wt=19): 475 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s2).  [resolve(112,a,104,a)].

given #338 (I,wt=19): 476 switch(A,s1) != s4 | -at(A,B,s1) | at(succ(A),B,s4) | -at(succ(C),B,s1).  [resolve(112,a,105,a)].

given #339 (I,wt=19): 477 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,out2).  [resolve(113,a,99,a)].

given #340 (I,wt=19): 478 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,out1).  [resolve(113,a,101,a)].

given #341 (I,wt=19): 479 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s3).  [resolve(113,a,102,a)].

given #342 (I,wt=19): 480 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s4).  [resolve(113,a,103,a)].

given #343 (I,wt=19): 481 switch(A,s2) != s4 | -at(A,B,s2) | at(succ(A),B,s4) | -at(succ(C),B,s2).  [resolve(113,a,104,a)].

given #344 (I,wt=17): 483 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,out2).  [resolve(114,a,99,a)].

given #345 (I,wt=17): 484 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,out1).  [resolve(114,a,101,a)].

given #346 (I,wt=17): 485 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s3).  [resolve(114,a,102,a)].

given #347 (I,wt=17): 486 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s4).  [resolve(114,a,103,a)].

given #348 (I,wt=17): 487 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s2).  [resolve(114,a,104,a)].

given #349 (I,wt=17): 488 -open(A,in2) | -at(A,B,in2) | at(succ(A),B,s2) | -at(succ(C),B,s1).  [resolve(114,a,105,a)].

given #350 (I,wt=17): 489 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,out2).  [resolve(115,a,99,a)].

given #351 (I,wt=17): 490 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,out1).  [resolve(115,a,101,a)].

given #352 (I,wt=17): 491 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s3).  [resolve(115,a,102,a)].

given #353 (I,wt=17): 492 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s4).  [resolve(115,a,103,a)].

given #354 (I,wt=17): 493 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s2).  [resolve(115,a,104,a)].

given #355 (I,wt=17): 494 -open(A,in1) | -at(A,B,in1) | at(succ(A),B,s1) | -at(succ(C),B,s1).  [resolve(115,a,105,a)].

given #356 (I,wt=3): 495 less(A,A).  [factor(118,a,b)].

given #357 (A,wt=9): 504 less(A,B) | -less(C,B) | less(C,A).  [resolve(118,a,117,b)].

given #358 (F,wt=3): 597 -free(c1,path7).  [resolve(424,a,247,b)].

given #359 (F,wt=3): 598 -free(c1,path6).  [resolve(424,a,244,b)].

given #360 (F,wt=3): 599 -free(c1,path3).  [resolve(424,a,235,b)].

given #361 (F,wt=3): 600 -free(c1,path2).  [resolve(424,a,232,b)].

given #362 (T,wt=4): 514 less(pred(A),A).  [para(122(a,1),119(a,2))].

given #363 (T,wt=5): 616 less(A,f3(A,c2)).  [resolve(432,a,425,a)].

given #364 (T,wt=6): 539 at(succ(A),f1(A),in2).  [resolve(191,b,123,a)].

given #365 (T,wt=6): 541 at(succ(A),f2(A),in1).  [resolve(194,b,124,a)].

given #366 (A,wt=7): 505 -less(A,B) | less(A,succ(B)).  [resolve(119,a,117,b)].

given #367 (F,wt=4): 602 -free(succ(c1),path7).  [resolve(425,a,247,b)].

given #368 (F,wt=4): 603 -free(succ(c1),path6).  [resolve(425,a,244,b)].

given #369 (F,wt=4): 604 -free(succ(c1),path3).  [resolve(425,a,235,b)].

given #370 (F,wt=4): 605 -free(succ(c1),path2).  [resolve(425,a,232,b)].

given #371 (T,wt=5): 868 less(pred(A),succ(A)).  [resolve(505,a,514,a)].

given #372 (T,wt=5): 870 less(A,succ(succ(A))).  [resolve(505,a,119,a)].

given #373 (T,wt=5): 876 less(pred(pred(A)),A).  [para(122(a,1),868(a,2))].

given #374 (T,wt=6): 862 at(A,f1(pred(A)),in2).  [para(122(a,1),539(a,1))].

given #375 (A,wt=7): 506 -less(succ(A),B) | less(A,B).  [resolve(119,a,117,a)].

given #376 (F,wt=9): 536 -at(pred(A),B,out2) | -at(A,B,out2).  [para(122(a,1),185(b,1))].

given #377 (F,wt=9): 537 -at(pred(A),B,out1) | -at(A,B,out1).  [para(122(a,1),186(b,1))].

given #378 (T,wt=6): 866 at(A,f2(pred(A)),in1).  [para(122(a,1),541(a,1))].

given #379 (T,wt=6): 867 less(A,succ(f3(A,c2))).  [resolve(505,a,616,a)].

given #380 (T,wt=6): 871 less(pred(A),succ(succ(A))).  [resolve(868,a,505,a)].

given #381 (T,wt=6): 877 less(A,succ(succ(succ(A)))).  [resolve(870,a,505,a)].

given #382 (A,wt=8): 507 -less(succ(A),A) | succ(A) = A.  [resolve(119,a,116,b),flip(b)].

given #383 (T,wt=6): 882 less(pred(pred(A)),succ(A)).  [resolve(876,a,505,a)].

given #384 (T,wt=6): 890 less(A,f3(succ(A),c2)).  [resolve(506,a,616,a)].

given #385 (T,wt=6): 915 less(pred(pred(pred(A))),A).  [para(122(a,1),882(a,2))].

given #386 (T,wt=6): 921 less(pred(A),f3(A,c2)).  [para(122(a,1),890(a,2,1))].

given #387 (A,wt=10): 508 less(succ(A),B) | -less(C,B) | less(C,A).  [resolve(120,a,117,b)].

given #388 (T,wt=7): 515 less(A,pred(B)) | less(B,A).  [para(122(a,1),120(b,1))].

given #389 (T,wt=7): 601 -at(c1,c2,A) | s4 = A.  [resolve(424,a,187,b)].

given #390 (T,wt=7): 849 less(A,succ(B)) | less(B,A).  [resolve(504,b,119,a)].

given #391 (T,wt=7): 851 less(A,B) | less(pred(B),A).  [resolve(514,a,504,b)].

given #392 (A,wt=10): 509 less(succ(A),B) | -less(A,C) | less(B,C).  [resolve(120,a,117,a)].

given #393 (T,wt=7): 852 -less(A,pred(B)) | less(A,B).  [resolve(514,a,117,b)].

given #394 (T,wt=7): 853 -less(A,B) | less(pred(A),B).  [resolve(514,a,117,a)].

given #395 (T,wt=7): 894 less(A,succ(f3(succ(A),c2))).  [resolve(867,a,506,a)].

given #396 (T,wt=7): 895 less(A,succ(succ(f3(A,c2)))).  [resolve(867,a,505,a)].

given #397 (A,wt=10): 510 less(succ(A),B) | -less(A,B) | B = A.  [resolve(120,a,116,b)].

given #398 (T,wt=7): 900 less(pred(A),succ(succ(succ(A)))).  [resolve(871,a,505,a)].

given #399 (T,wt=7): 905 less(A,succ(succ(succ(succ(A))))).  [resolve(877,a,506,a)].

given #400 (T,wt=7): 910 less(pred(pred(A)),succ(succ(A))).  [resolve(882,a,505,a)].

given #401 (T,wt=7): 916 less(A,f3(succ(succ(A)),c2)).  [resolve(890,a,506,a)].

given #402 (A,wt=10): 511 less(succ(A),B) | -less(A,B) | A = B.  [resolve(120,a,116,a)].

given #403 (T,wt=7): 922 less(pred(pred(pred(A))),succ(A)).  [resolve(915,a,505,a)].

given #404 (T,wt=7): 927 less(pred(A),succ(f3(A,c2))).  [resolve(921,a,505,a)].

given #405 (T,wt=7): 955 free(c1,path5) | at(c1,c2,s3).  [resolve(601,a,243,c),flip(a),unit_del(a,171)].

given #406 (T,wt=3): 1044 free(c1,path5).  [resolve(955,b,601,a),flip(b),unit_del(b,184)].

given #407 (A,wt=10): 512 less(A,B) | -less(C,succ(B)) | less(C,A).  [resolve(120,b,117,b)].

given #408 (T,wt=7): 956 free(c1,path4) | at(c1,c2,s3).  [resolve(601,a,240,c),flip(a),unit_del(a,175)].

given #409 (T,wt=3): 1045 free(c1,path4).  [resolve(956,b,601,a),flip(b),unit_del(b,184)].

given #410 (T,wt=7): 957 free(c1,path1) | at(c1,c2,s3).  [resolve(601,a,231,c),flip(a),unit_del(a,171)].

given #411 (T,wt=3): 1046 free(c1,path1).  [resolve(957,b,601,a),flip(b),unit_del(b,184)].

given #412 (A,wt=11): 513 less(A,B) | -less(A,succ(B)) | succ(B) = A.  [resolve(120,b,116,b)].

given #413 (T,wt=7): 958 free(c1,path0) | at(c1,c2,s3).  [resolve(601,a,228,c),flip(a),unit_del(a,175)].

given #414 (T,wt=3): 1049 free(c1,path0).  [resolve(958,b,601,a),flip(b),unit_del(b,184)].

given #415 (T,wt=7): 977 less(pred(pred(pred(pred(A)))),A).  [resolve(852,a,915,a)].

given #416 (T,wt=7): 980 less(pred(pred(A)),f3(A,c2)).  [resolve(853,a,921,a)].

given #417 (A,wt=16): 516 switch(pred(A),s3) = out2 | switch(pred(A),s4) = out2 | -at(A,B,out2).  [para(122(a,1),125(c,1))].

given #418 (T,wt=7): 981 less(pred(A),f3(succ(A),c2)).  [resolve(853,a,890,a)].

given #419 (T,wt=8): 532 open(pred(A),in2) | -at(A,B,s2).  [para(122(a,1),141(b,1))].

given #420 (T,wt=8): 534 open(pred(A),in1) | -at(A,B,s1).  [para(122(a,1),143(b,1))].

given #421 (T,wt=8): 606 -at(succ(c1),c2,A) | s4 = A.  [resolve(425,a,187,b)].

given #422 (A,wt=15): 517 switch(pred(A),s3) = out2 | at(pred(A),B,s4) | -at(A,B,out2).  [para(122(a,1),126(c,1))].

given #423 (T,wt=8): 607 at(c1,c2,s1) | at(c1,c2,s2).  [resolve(425,a,140,c)].

given #424 (T,wt=4): 1080 at(c1,c2,s1).  [resolve(607,b,601,a),flip(b),unit_del(b,171)].

============================== PROOF =================================

% Proof 1 at 0.09 (+ 0.01) seconds.
% Length of proof is 14.
% Level of proof is 4.
% Maximum clause weight is 13.000.
% Given clauses 424.

13 (all X all T (train(T) & go(X,T) & (switch(X,s1) = s4 & at(X,T,s1) | switch(X,s2) = s4 & at(X,T,s2)) <-> at(succ(X),T,s4))) # label(s4ax1) # label(axiom) # label(non_clause).  [assumption].
16 in2 != in1 & in2 != s2 & in2 != s1 & in2 != out2 & in2 != out1 & in2 != s3 & in2 != s4 & in1 != s2 & in1 != s1 & in1 != out2 & in1 != out1 & in1 != s3 & in1 != s4 & s2 != s1 & s2 != out2 & s2 != out1 & s2 != s3 & s2 != s4 & s1 != out2 & s1 != out1 & s1 != s3 & s1 != s4 & out2 != out1 & out2 != s3 & out2 != s4 & out1 != s3 & out1 != s4 & s3 != s4 # label(nodesExclusivity) # label(axiom) # label(non_clause).  [assumption].
19 (all X all T all N1 all N2 (at(X,T,N1) & at(X,T,N2) -> N1 = N2)) # label(positionInOneNodeAtTime) # label(axiom) # label(non_clause).  [assumption].
76 (all X all T (at(X,T,s4) & at(succ(X),T,s4) -> switch(X,s4) = switch(succ(X),s4))) # label(changeOnlyWithoutTrain) # label(conjecture) # label(non_clause) # label(goal).  [goal].
140 at(A,B,s1) | at(A,B,s2) | -at(succ(A),B,s4) # label(s4ax1) # label(axiom).  [clausify(13)].
171 s2 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
175 s1 != s4 # label(nodesExclusivity) # label(axiom).  [clausify(16)].
187 -at(A,B,C) | -at(A,B,D) | D = C # label(positionInOneNodeAtTime) # label(axiom).  [clausify(19)].
424 at(c1,c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
425 at(succ(c1),c2,s4) # label(changeOnlyWithoutTrain) # label(conjecture).  [deny(76)].
601 -at(c1,c2,A) | s4 = A.  [resolve(424,a,187,b)].
607 at(c1,c2,s1) | at(c1,c2,s2).  [resolve(425,a,140,c)].
1080 at(c1,c2,s1).  [resolve(607,b,601,a),flip(b),unit_del(b,171)].
1081 $F.  [resolve(1080,a,601,a),flip(a),unit_del(a,175)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=424. Generated=1416. Kept=953. proofs=1.
Usable=365. Sos=430. Demods=2. Limbo=0, Disabled=564. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=462. Back_subsumed=158.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=2 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=12418. Demod_rewrites=84.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=1932. Nonunit_bsub_feature_tests=1376.
Megabytes=2.67.
User_CPU=0.09, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 23704 exit (max_proofs) Fri Jun  6 15:37:29 2014
